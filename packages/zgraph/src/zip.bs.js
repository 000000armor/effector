// Generated by BUCKLESCRIPT VERSION 2.2.0, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");

var lst1 = /* Section */Block.__(1, [/* :: */[
      /* Section */Block.__(1, [/* :: */[
            /* Item */Block.__(0, ["a"]),
            /* :: */[
              /* Item */Block.__(0, ["*"]),
              /* :: */[
                /* Item */Block.__(0, ["b"]),
                /* [] */0
              ]
            ]
          ]]),
      /* :: */[
        /* Item */Block.__(0, ["+"]),
        /* :: */[
          /* Section */Block.__(1, [/* :: */[
                /* Item */Block.__(0, ["c"]),
                /* :: */[
                  /* Item */Block.__(0, ["*"]),
                  /* :: */[
                    /* Item */Block.__(0, ["d"]),
                    /* [] */0
                  ]
                ]
              ]]),
          /* [] */0
        ]
      ]
    ]]);

function go_left(param) {
  var p = param[1];
  if (p) {
    var match = p[0];
    if (match) {
      return /* Loc */[
              match[0],
              /* Node */[
                match[1],
                p[1],
                /* :: */[
                  param[0],
                  p[2]
                ]
              ]
            ];
    } else {
      return Pervasives.failwith("left of first");
    }
  } else {
    return Pervasives.failwith("left of top");
  }
}

function go_right(param) {
  var p = param[1];
  if (p) {
    var match = p[2];
    if (match) {
      return /* Loc */[
              match[0],
              /* Node */[
                /* :: */[
                  param[0],
                  p[0]
                ],
                p[1],
                match[1]
              ]
            ];
    } else {
      return Pervasives.failwith("right of last");
    }
  } else {
    return Pervasives.failwith("right of top");
  }
}

function go_up(param) {
  var p = param[1];
  if (p) {
    return /* Loc */[
            /* Section */Block.__(1, [Pervasives.$at(p[0], /* :: */[
                      param[0],
                      p[2]
                    ])]),
            p[1]
          ];
  } else {
    return Pervasives.failwith("up of top");
  }
}

function go_down(param) {
  var t = param[0];
  if (t.tag) {
    var match = t[0];
    if (match) {
      return /* Loc */[
              match[0],
              /* Node */[
                /* [] */0,
                param[1],
                match[1]
              ]
            ];
    } else {
      return Pervasives.failwith("down of empty");
    }
  } else {
    return Pervasives.failwith("down of item");
  }
}

function change(param, t) {
  return /* Loc */[
          t,
          param[1]
        ];
}

function insert_right(param, r) {
  var p = param[1];
  if (p) {
    return /* Loc */[
            param[0],
            /* Node */[
              p[0],
              p[1],
              /* :: */[
                r,
                p[2]
              ]
            ]
          ];
  } else {
    return Pervasives.failwith("insert of top");
  }
}

function insert_left(param, l) {
  var p = param[1];
  if (p) {
    return /* Loc */[
            param[0],
            /* Node */[
              /* :: */[
                l,
                p[0]
              ],
              p[1],
              p[2]
            ]
          ];
  } else {
    return Pervasives.failwith("insert of top");
  }
}

function insert_down(param, t1) {
  var t = param[0];
  if (t.tag) {
    return /* Loc */[
            t1,
            /* Node */[
              /* [] */0,
              param[1],
              t[0]
            ]
          ];
  } else {
    return Pervasives.failwith("down of item");
  }
}

function $$delete(param) {
  var p = param[1];
  if (p) {
    var left = p[0];
    var match = p[2];
    if (match) {
      return /* Loc */[
              match[0],
              /* Node */[
                left,
                p[1],
                match[1]
              ]
            ];
    } else if (left) {
      return /* Loc */[
              left[0],
              /* Node */[
                left[1],
                p[1],
                /* [] */0
              ]
            ];
    } else {
      return /* Loc */[
              /* Section */Block.__(1, [/* [] */0]),
              p[1]
            ];
    }
  } else {
    return Pervasives.failwith("delete of top");
  }
}

console.log(lst1);

exports.lst1 = lst1;
exports.go_left = go_left;
exports.go_right = go_right;
exports.go_up = go_up;
exports.go_down = go_down;
exports.change = change;
exports.insert_right = insert_right;
exports.insert_left = insert_left;
exports.insert_down = insert_down;
exports.$$delete = $$delete;
/*  Not a pure module */
