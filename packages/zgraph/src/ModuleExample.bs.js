// Generated by BUCKLESCRIPT VERSION 2.2.0, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");

var MyModule = /* module */[/* x */10];

var NestedModule = /* module */[/* msg */"hello"];

var MyModuleNest = /* module */[/* NestedModule */NestedModule];

function $$Set(Elt) {
  var add = function (x, s) {
    if (s) {
      var hd = s[0];
      var match = Curry._2(Elt[/* compare */0], x, hd);
      switch (match) {
        case 0 : 
            return /* :: */[
                    x,
                    s
                  ];
        case 1 : 
            return s;
        case 2 : 
            return /* :: */[
                    hd,
                    add(x, s[1])
                  ];
        
      }
    } else {
      return /* :: */[
              x,
              /* [] */0
            ];
    }
  };
  var member = function (x, _s) {
    while(true) {
      var s = _s;
      if (s) {
        var match = Curry._2(Elt[/* compare */0], x, s[0]);
        switch (match) {
          case 0 : 
              return /* false */0;
          case 1 : 
              return /* true */1;
          case 2 : 
              _s = s[1];
              continue ;
              
        }
      } else {
        return /* false */0;
      }
    };
  };
  return /* module */[
          /* empty : [] */0,
          /* add */add,
          /* member */member
        ];
}

function compare(x, y) {
  if (Caml_obj.caml_equal(x, y)) {
    return /* Equal */1;
  } else if (Caml_obj.caml_lessthan(x, y)) {
    return /* Less */0;
  } else {
    return /* Greater */2;
  }
}

var OrderedString = /* module */[/* compare */compare];

exports.MyModule = MyModule;
exports.MyModuleNest = MyModuleNest;
exports.$$Set = $$Set;
exports.OrderedString = OrderedString;
/* No side effect */
