---
import { getPathParamsFromId, getTextLocalized as t, translations } from "../../languages";
import "@pagefind/default-ui/css/ui.css";

const { lang } = getPathParamsFromId(Astro.url.pathname);
const pagefindTranslations = Object.fromEntries(
  Object.entries(translations.Pagefind).map(([key, value]) => [key, t(value, lang)]),
);
---

<site-search data-translations={JSON.stringify(pagefindTranslations)}>
  <button data-open-modal disabled type="button" class="search-input">
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="18"
      height="18"
      viewBox="0 0 24 24"
      stroke-width="1.5"
      stroke="currentColor"
      fill="none"
      stroke-linecap="round"
      stroke-linejoin="round"
    >
      <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
      <circle cx="10" cy="10" r="7"></circle>
      <line x1="21" y1="21" x2="15" y2="15"></line>
    </svg>

    <span class="search-text">Search</span>

    <span class="search-hint">
      <span class="sr-only">Press</span>

      <kbd>⌘</kbd>
      <kbd>K</kbd>

      <span class="sr-only"> to search</span>
    </span>
  </button>

  <dialog aria-label={t(translations.Search.label, lang)}>
    <div class="dialog-frame">
      {
        /* TODO: Make the layout of this button flexible to accommodate different word lengths. Currently hard-coded for English: “Cancel” */
      }
      <button data-close-modal>
        {t(translations.Search.cancelLabel, lang)}
      </button>
      {
        false && import.meta.env.DEV ? (
          <div style="margin: auto; text-align: center; white-space: pre-line;" dir="ltr">
            <p>{t(translations.Search.devWarning, lang)}</p>
          </div>
        ) : (
          <div class="search-container">
            <div id="pagefind__search" />
          </div>
        )
      }
    </div>
  </dialog>
</site-search>

<script>
  class SiteSearch extends HTMLElement {
    constructor() {
      super();
      const openBtn = this.querySelector<HTMLButtonElement>("button[data-open-modal]")!;
      const closeBtn = this.querySelector<HTMLButtonElement>("button[data-close-modal]")!;
      const dialog = this.querySelector("dialog")!;
      const dialogFrame = this.querySelector(".dialog-frame")!;

      /** Close the modal if a user clicks outside of the modal. */
      const onWindowClick = (event: MouseEvent) => {
        if (
          document.body.contains(event.target as Node) &&
          !dialogFrame.contains(event.target as Node)
        )
          closeModal();
      };

      const openModal = (event?: MouseEvent) => {
        dialog.showModal();
        this.querySelector("input")?.focus();
        event?.stopPropagation();
        window.addEventListener("click", onWindowClick);
      };

      const closeModal = () => {
        dialog.close();
        window.removeEventListener("click", onWindowClick);
      };

      openBtn.addEventListener("click", openModal);
      openBtn.disabled = false;
      closeBtn.addEventListener("click", closeModal);

      // Listen for `/` and `cmd + k` keyboard shortcuts.
      window.addEventListener("keydown", (e) => {
        if (e.metaKey === true && e.key === "k") {
          dialog.open ? closeModal() : openModal();
          e.preventDefault();
        } else if (e.key === "/" && !dialog.open) {
          openModal();
          e.preventDefault();
        }
      });

      let translations = {};
      try {
        translations = JSON.parse(this.dataset.translations || "{}");
      } catch {}

      window.addEventListener("DOMContentLoaded", () => {
        // if (import.meta.env.DEV) return;
        const onIdle = window.requestIdleCallback || ((cb) => setTimeout(cb, 1));
        onIdle(async () => {
          const { PagefindUI } = await import("@pagefind/default-ui");
          new PagefindUI({
            element: "#pagefind__search",
            baseUrl: import.meta.env.BASE_URL,
            bundlePath: import.meta.env.BASE_URL.replace(/\/$/, "") + "/_pagefind/",
            // bundlePath: "http://localhost:1414/_pagefind/",
            showImages: false,
            translations,
          });
        });
      });
    }
  }
  customElements.define("site-search", SiteSearch);
</script>

<style>
  .search-input {
    @apply m-0 box-border flex cursor-pointer rounded-2xl px-2 py-1 outline-0;

    transition-property: border-color, color, background-color;
    transition-duration: 0.2s;
    transition-timing-function: ease-out;

    background-color: var(--theme-divider);
    color: var(--theme-text-light);
    overflow: visible;

    font-family: inherit;
    font-size: 0.9rem;
    font-weight: 500;
    line-height: inherit;
    -webkit-font-smoothing: antialiased;
  }

  .search-input:focus {
    box-shadow: 0 0 0 2px var(--theme-text-accent);
    color: var(--theme-text);
  }

  .search-input:hover::placeholder,
  .search-input:focus::placeholder {
    color: var(--theme-text-light);
  }

  .search-input::placeholder {
    color: var(--theme-text-light);
  }

  .search-input svg {
    margin-right: 0.25rem;
  }

  .search-text {
    margin-right: 1em;
  }

  .search-hint {
    display: none;
    justify-content: center;
    align-items: center;
    border-width: 1px;
    border-style: solid;
    border-color: var(--theme-text-lighter);
    border-radius: 0.5rem;
    padding: 3px 5px;
    pointer-events: none;
    color: var(--theme-text-light);
    font-size: 13px;
    line-height: 14px;
    font-family: var(--font-mono);
    letter-spacing: 0.125em;
  }

  @media (min-width: 50em) {
    .search-hint {
      display: flex;
    }
  }

  dialog {
    @apply m-0 h-full max-h-full w-full max-w-full shadow-lg;
    background-color: var(--docsearch-modal-background);
    border: 1px solid var(--docsearch-modal-background);
  }

  dialog::backdrop {
    @apply backdrop-blur-md;
    background-color: var(--theme-backdrop-color);
  }

  .dialog-frame {
    @apply flex flex-col;
  }

  button[data-close-modal] {
    display: none;
    position: absolute;
    z-index: 1;
    align-items: center;
    align-self: flex-end;
    height: calc(64px * var(--pagefind-ui-scale));
    padding: 0.25rem;
    border: 0;
    background: transparent;
    cursor: pointer;
    color: var(--theme-text-accent);
  }

  #pagefind__search {
  }

  @media (min-width: 50rem) {
    #pagefind__search {
    }

    dialog {
      margin: 4rem auto auto;
      border-radius: 0.5rem;
      /* width: 90%; */
      max-width: 40rem;
      height: max-content;
      min-height: 15rem;
      max-height: calc(100% - 8rem);
    }
  }
</style>

<style is:global>
  #pagefind__search .pagefind-ui__form::before {
    --pagefind-ui-text: var(--theme-text-lighter);
    opacity: 1;
  }

  #pagefind__search .pagefind-ui__search-input {
    color: var(--theme-text);
    font-weight: 400;
    width: 100%;
  }

  #pagefind__search input:focus {
    --pagefind-ui-border: var(--theme-accent-color);
  }

  #pagefind__search .pagefind-ui__search-clear {
    width: calc(60px * var(--pagefind-ui-scale));
    padding: 0;
    background-color: transparent;
    overflow: hidden;
  }
  #pagefind__search .pagefind-ui__search-clear:focus {
    outline: 1px solid var(--theme-accent-color);
  }
  #pagefind__search .pagefind-ui__search-clear::before {
    content: "";
    -webkit-mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath d='m13.41 12 6.3-6.29a1 1 0 1 0-1.42-1.42L12 10.59l-6.29-6.3a1 1 0 0 0-1.42 1.42l6.3 6.29-6.3 6.29a1 1 0 0 0 .33 1.64 1 1 0 0 0 1.09-.22l6.29-6.3 6.29 6.3a1 1 0 0 0 1.64-.33 1 1 0 0 0-.22-1.09L13.41 12Z'/%3E%3C/svg%3E")
      center / 50% no-repeat;
    mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath d='m13.41 12 6.3-6.29a1 1 0 1 0-1.42-1.42L12 10.59l-6.29-6.3a1 1 0 0 0-1.42 1.42l6.3 6.29-6.3 6.29a1 1 0 0 0 .33 1.64 1 1 0 0 0 1.09-.22l6.29-6.3 6.29 6.3a1 1 0 0 0 1.64-.33 1 1 0 0 0-.22-1.09L13.41 12Z'/%3E%3C/svg%3E")
      center / 50% no-repeat;
    background-color: var(--theme-accent-color);
    display: block;
    width: 100%;
    height: 100%;
  }

  #pagefind__search .pagefind-ui__results > * + * {
    margin-top: 0.5rem;
  }
  #pagefind__search .pagefind-ui__result {
    position: relative;
    border: 0;
    border-radius: 0.25rem;
    padding: 1rem;
    background-color: var(--sl-color-black);
  }

  #pagefind__search .pagefind-ui__result:hover,
  #pagefind__search .pagefind-ui__result:focus-within {
    outline: 1px solid var(--theme-accent-color-high);
  }

  #pagefind__search .pagefind-ui__result:focus-within {
    background-color: var(--theme-accent-color-low);
  }

  #pagefind__search .pagefind-ui__result-thumb,
  #pagefind__search .pagefind-ui__result-inner {
    margin-top: 0;
  }

  #pagefind__search .pagefind-ui__result-link {
    --pagefind-ui-text: var(--sl-color-white);
    font-weight: 600;
  }

  #pagefind__search .pagefind-ui__result-link:hover {
    text-decoration: none;
  }

  #pagefind__search .pagefind-ui__result-link::after {
    content: "";
    position: absolute;
    inset: 0;
  }

  #pagefind__search .pagefind-ui__result-excerpt {
    font-size: var(--sl-text-body-sm);
    word-break: break-word;
  }

  #pagefind__search mark {
    color: var(--sl-color-white);
    background-color: var(--theme-accent-color-low);
    font-weight: 500;
    padding: 0.1em 0.2em;
  }

  #pagefind__search .pagefind-ui__result:focus-within mark {
    text-decoration: underline;
  }
</style>
