---
import { Octokit } from "@octokit/rest";
import { promisify } from "node:util";
import * as childProcess from "node:child_process";

const exec = promisify(childProcess.exec);

import { GITHUB_REPO } from "../consts";
import IconCopy from "../icons/Copy.astro";

const [owner, repo] = GITHUB_REPO.split("/");
const repoInfo = { owner, repo };

const octokit = new Octokit({ auth: import.meta.env.GITHUB_TOKEN });

const labelMapper = {
  size: "gzipped size",
  contributors: "contributors",
  stars: "stars",
  downloads: "downloads",
  latest: "latest version",
  license: "license",
} as const;

async function getNpmStats() {
  // const today = new Date();
  // const fromDate = new Date("2018-01-17T03:17:09.763Z");
  // const fromDateString = new Intl.DateTimeFormat("en-US").format(fromDate);
  // const toDateString = new Intl.DateTimeFormat("en-US").format(today);
  //
  // const downloadCounts = await fetch(
  //   `https://npm-stat.com/api/download-counts?package=effector&from=${fromDateString}&until=${toDateString}`,
  // );

  const result = await exec("npm info effector --json");
  const npm = JSON.parse(result.stdout);

  const latest = npm["dist-tags"].latest;

  return {
    latest,
    // downloadCounts,
  };
}


async function getRepoStats() {
  const { data: repo } = await octokit.repos.get(repoInfo);

  let contributorsCount = 0;
  let page = 1;
  while (true) {
    const { data: pageContributors } = await octokit.repos.listContributors({
      ...repoInfo,
      per_page: 100,
      page,
    });
    contributorsCount += pageContributors.length;

    if (pageContributors.length < 100) {
      break;
    }
    page++;
  }

  return {
    stars: repo.stargazers_count,
    contributors: contributorsCount,
    license: repo.license.spdx_id,
  };
}

async function getGzipSize() {
  try {
    const response = await fetch("https://bundlephobia.com/api/size?package=effector@latest");

    if (response.ok) {
      const { gzip } = await response.json();

      if (!gzip) return null;

      return {
        size: `${(gzip / 1024).toFixed(1)} kB`,
      };
    } else {
      console.log(response);
    }
  } catch (error) {
  }
}


const statsMock: Partial<Record<keyof typeof labelMapper, string | number>> = {
  latest: "23.4",
  contributors: 124,
  license: "MIT",
  size: "124.5",
  stars: 3452,
  downloads: 343452,
};

const stats = {
  ...(await getRepoStats()),
  ...(await getNpmStats()),
  ...(await getGzipSize()),
};
---

<div class="wrapper">
  <div class="stats">
    <div class="counts">
      {
        Object.entries(stats).map(([label, counter]) => {
          return (
            <div class="stats-card">
              <div class="text-4xl">{counter}</div>
              <div class="label">{labelMapper[label]}</div>
            </div>
          );
        })
      }
    </div>
    <div class="stats-bar">
      <span>Start by adding effector as a dependency:</span>
      <div class="install-command">
        <span class="inline-block"><span class="text-slate-400">$</span> npm add <span
          class="text-orange-600">effector</span></span>
        <button id="copy-command" class="copy-button">
          <IconCopy />
        </button>
      </div>
    </div>
  </div>
</div>

<style>
    .wrapper {
        @apply mx-auto max-w-6xl p-3 sm:p-6;
    }

    .stats {
        @apply min-h-[4rem] rounded-2xl border-gray-300 bg-[var(--theme-card)] shadow-lg p-2.5 pt-3;
    }

    .counts {
        @apply mb-6 grid gap-y-2 grid-cols-2 sm:grid-cols-3 lg:grid-cols-6;
    }

    .stats-card {
        @apply min-w-[8rem] rounded-md p-2.5 flex flex-col items-center lg:items-start;
        @apply transition-all hover:bg-orange-500 hover:text-white hover:shadow-xl;
    }

    .stats-bar {
        @apply flex flex-wrap justify-between items-center gap-6 pl-2;
    }

    .install-command {
        @apply font-mono whitespace-pre flex flex-1 items-center justify-between bg-gray-200 rounded-md p-1.5 pl-2.5 max-w-xl;
        @apply dark:bg-gray-600;
    }

    .copy-button {
        @apply flex justify-center items-center rounded-md p-1 bg-gray-300;
        @apply transition-all hover:bg-orange-500 hover:text-white hover:shadow-md;
        @apply dark:bg-gray-500 dark:hover:bg-orange-500 dark:hover:text-white;
    }
</style>

<script>
  const button = document.getElementById("copy-command") as HTMLButtonElement;

  async function copyInstallationCommand() {
    try {
      await navigator.clipboard.writeText("npm add effector");
    } catch (error) {
      console.error("Failed to copy text:", error);
    }
  }

  button.addEventListener("click", copyInstallationCommand);
</script>
