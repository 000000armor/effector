---
import type { MarkdownHeading } from "astro";
import { getPathParamsFromId } from "../../languages";
import { getLocalizedSidebar } from "../../sidebars";

type Props = {
  currentPage: string;
  headings: MarkdownHeading[];
};

const { currentPage } = Astro.props;
const currentPageMatch = currentPage.endsWith("/") ? currentPage.slice(0, -1) : currentPage;

const { slug, lang } = getPathParamsFromId(Astro.url.pathname);
const baseSidebar = await getLocalizedSidebar(slug, lang);
// TODO: add collapsible groups
---

<nav aria-labelledby="grid-left">
  <ul class="nav-groups">
    {
      baseSidebar.map((group) => (
        <li>
          <div class="nav-group">
            <h2 class="nav-group-title">{group.title}</h2>
            <ul>
              {group.items.map((item) => (
                <li class="nav-link">
                  <a
                    href={item.link}
                    aria-current={currentPageMatch === item.link ? "page" : false}
                    target={item.link.startsWith("/") ? undefined : "_blank"}
                  >
                    {item.title}
                  </a>
                </li>
              ))}
            </ul>
          </div>
        </li>
      ))
    }
  </ul>
  <!-- <TableOfContents client:media="(min-width: 72em)" headings={headings} /> -->
</nav>

<script is:inline>
  window.addEventListener("DOMContentLoaded", () => {
    var target = document.querySelector('[aria-current="page"]');
    if (target && target.offsetTop > window.innerHeight - 100) {
      document.querySelector(".nav-groups").scrollTop = target.offsetTop;
    }
  });
</script>

<style>
  nav {
    margin-right: 1rem;
    width: 100%;
  }

  .nav-groups {
    position: sticky;
    top: var(--theme-navbar-height);
    padding: 2rem 0;
    height: 100%;
    max-height: 100vh;
    overflow-x: visible;
    overflow-y: auto;
  }

  .nav-groups > li + li {
    margin-top: 2rem;
  }

  .nav-groups > :first-child {
    padding-top: var(--doc-padding);
  }

  .nav-groups > :first-child h2 {
    margin-top: 0;
  }

  .nav-groups > :last-child {
    margin-bottom: var(--theme-navbar-height);
    padding-bottom: 2rem;
  }

  .nav-group-title {
    margin-bottom: 0.5rem;
    padding: 0.1rem 1rem;
    font-weight: 700;
    font-size: 1rem;
    text-transform: uppercase;
  }

  .nav-link a {
    display: block;
    margin: 1px;
    padding: 0.3rem 1rem;
    color: inherit;
    font-size: 1rem;
    font: inherit;
    text-decoration: none;
  }

  .nav-link a:hover,
  .nav-link a:focus {
    background-color: var(--theme-bg-hover);
  }

  .nav-link a[aria-current="page"] {
    background-color: var(--theme-accent);
    color: var(--theme-bg);
    font-weight: 600;
  }

  .nav-link a[href^="http://"]::after,
  .nav-link a[href^="https://"]::after
  {
    display: inline-block;
    margin-left: 0.4em;
    background-image: url("/external.svg");
    background-position: center;
    background-size: contain;
    background-repeat: no-repeat;
    width: 0.7em;
    height: 0.7em;
    content: "";
  }

  :global(.theme-dark) .nav-link a[href^="http://"]::after,
  :global(.theme-dark) .nav-link a[href^="https://"]::after
  {
    filter: invert();
  }

  @media (min-width: 50em) {
    .nav-groups {
      padding: 0;
    }
  }
</style>

<style is:global>
  :root.theme-dark .nav-link a[aria-current="page"] {
    color: hsla(var(--color-base-white), 100%, 1);
  }
</style>
