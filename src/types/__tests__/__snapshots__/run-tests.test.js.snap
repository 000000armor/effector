// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Flow: json messages 1`] = `
Array [
  Array [
    "Cannot assign \`computed\` to \`check2\` because string [1] is incompatible with number [2] in type argument \`Payload\` [3].",
  ],
  Array [
    "Cannot assign \`createStore(...)\` to \`store2\` because number [1] is incompatible with string [2] in type argument \`State\` [3].",
  ],
  Array [
    "Cannot assign \`computed\` to \`check2\` because string [1] is incompatible with number [2] in type argument \`State\` [3].",
  ],
  Array [
    "Cannot call \`createDomain\` with \`234\` bound to \`domainName\` because number [1] is incompatible with string [2].",
  ],
  Array [
    "Cannot call \`createDomain\` with object literal bound to \`domainName\` because object literal [1] is incompatible with string [2].",
  ],
]
`;

exports[`Flow: json rejected 1`] = `
Object {
  "errors": Array [
    Object {
      "extra": Array [
        Object {
          "message": Array [
            Object {
              "context": null,
              "descr": "References:",
              "end": 0,
              "endline": 0,
              "line": 0,
              "path": "",
              "start": 1,
              "type": "Blame",
            },
          ],
        },
        Object {
          "message": Array [
            Object {
              "context": "    const check1: Event<string> = computed",
              "descr": "[1]",
              "end": 30,
              "endline": 29,
              "line": 29,
              "loc": Object {
                "end": Object {
                  "column": 30,
                  "line": 29,
                  "offset": 505,
                },
                "source": "types.test.js",
                "start": Object {
                  "column": 25,
                  "line": 29,
                  "offset": 499,
                },
                "type": "SourceFile",
              },
              "path": "types.test.js",
              "start": 25,
              "type": "Blame",
            },
          ],
        },
        Object {
          "message": Array [
            Object {
              "context": "    const check2: Event<number> = computed",
              "descr": "[2]",
              "end": 30,
              "endline": 30,
              "line": 30,
              "loc": Object {
                "end": Object {
                  "column": 30,
                  "line": 30,
                  "offset": 548,
                },
                "source": "types.test.js",
                "start": Object {
                  "column": 25,
                  "line": 30,
                  "offset": 542,
                },
                "type": "SourceFile",
              },
              "path": "types.test.js",
              "start": 25,
              "type": "Blame",
            },
          ],
        },
        Object {
          "message": Array [
            Object {
              "context": "declare export class Event<Payload> implements Unit<Payload> {",
              "descr": "[3]",
              "end": 34,
              "endline": 23,
              "line": 23,
              "loc": Object {
                "end": Object {
                  "column": 34,
                  "line": 23,
                  "offset": 415,
                },
                "source": "../../packages/effector/index.js.flow",
                "start": Object {
                  "column": 28,
                  "line": 23,
                  "offset": 408,
                },
                "type": "SourceFile",
              },
              "path": "../../packages/effector/index.js.flow",
              "start": 28,
              "type": "Blame",
            },
          ],
        },
      ],
      "kind": "infer",
      "level": "error",
      "message": Array [
        Object {
          "context": "    const check2: Event<number> = computed",
          "descr": "Cannot assign \`computed\` to \`check2\` because string [1] is incompatible with number [2] in type argument \`Payload\` [3].",
          "end": 42,
          "endline": 30,
          "line": 30,
          "loc": Object {
            "end": Object {
              "column": 42,
              "line": 30,
              "offset": 560,
            },
            "source": "types.test.js",
            "start": Object {
              "column": 35,
              "line": 30,
              "offset": 552,
            },
            "type": "SourceFile",
          },
          "path": "types.test.js",
          "start": 35,
          "type": "Blame",
        },
      ],
      "suppressions": Array [],
    },
    Object {
      "extra": Array [
        Object {
          "message": Array [
            Object {
              "context": null,
              "descr": "References:",
              "end": 0,
              "endline": 0,
              "line": 0,
              "path": "",
              "start": 1,
              "type": "Blame",
            },
          ],
        },
        Object {
          "message": Array [
            Object {
              "context": "    const store2: Store<string> = createStore(0)",
              "descr": "[1]",
              "end": 47,
              "endline": 45,
              "line": 45,
              "loc": Object {
                "end": Object {
                  "column": 47,
                  "line": 45,
                  "offset": 878,
                },
                "source": "types.test.js",
                "start": Object {
                  "column": 47,
                  "line": 45,
                  "offset": 877,
                },
                "type": "SourceFile",
              },
              "path": "types.test.js",
              "start": 47,
              "type": "Blame",
            },
          ],
        },
        Object {
          "message": Array [
            Object {
              "context": "    const store2: Store<string> = createStore(0)",
              "descr": "[2]",
              "end": 30,
              "endline": 45,
              "line": 45,
              "loc": Object {
                "end": Object {
                  "column": 30,
                  "line": 45,
                  "offset": 861,
                },
                "source": "types.test.js",
                "start": Object {
                  "column": 25,
                  "line": 45,
                  "offset": 855,
                },
                "type": "SourceFile",
              },
              "path": "types.test.js",
              "start": 25,
              "type": "Blame",
            },
          ],
        },
        Object {
          "message": Array [
            Object {
              "context": "declare export class Store<State> implements Unit<State> {",
              "descr": "[3]",
              "end": 32,
              "endline": 63,
              "line": 63,
              "loc": Object {
                "end": Object {
                  "column": 32,
                  "line": 63,
                  "offset": 1661,
                },
                "source": "../../packages/effector/index.js.flow",
                "start": Object {
                  "column": 28,
                  "line": 63,
                  "offset": 1656,
                },
                "type": "SourceFile",
              },
              "path": "../../packages/effector/index.js.flow",
              "start": 28,
              "type": "Blame",
            },
          ],
        },
      ],
      "kind": "infer",
      "level": "error",
      "message": Array [
        Object {
          "context": "    const store2: Store<string> = createStore(0)",
          "descr": "Cannot assign \`createStore(...)\` to \`store2\` because number [1] is incompatible with string [2] in type argument \`State\` [3].",
          "end": 47,
          "endline": 45,
          "line": 45,
          "loc": Object {
            "end": Object {
              "column": 47,
              "line": 45,
              "offset": 878,
            },
            "source": "types.test.js",
            "start": Object {
              "column": 47,
              "line": 45,
              "offset": 877,
            },
            "type": "SourceFile",
          },
          "path": "types.test.js",
          "start": 47,
          "type": "Blame",
        },
      ],
      "suppressions": Array [],
    },
    Object {
      "extra": Array [
        Object {
          "message": Array [
            Object {
              "context": null,
              "descr": "References:",
              "end": 0,
              "endline": 0,
              "line": 0,
              "path": "",
              "start": 1,
              "type": "Blame",
            },
          ],
        },
        Object {
          "message": Array [
            Object {
              "context": "    const check1: Store<string> = computed",
              "descr": "[1]",
              "end": 30,
              "endline": 94,
              "line": 94,
              "loc": Object {
                "end": Object {
                  "column": 30,
                  "line": 94,
                  "offset": 2209,
                },
                "source": "types.test.js",
                "start": Object {
                  "column": 25,
                  "line": 94,
                  "offset": 2203,
                },
                "type": "SourceFile",
              },
              "path": "types.test.js",
              "start": 25,
              "type": "Blame",
            },
          ],
        },
        Object {
          "message": Array [
            Object {
              "context": "    const check2: Store<number> = computed",
              "descr": "[2]",
              "end": 30,
              "endline": 96,
              "line": 96,
              "loc": Object {
                "end": Object {
                  "column": 30,
                  "line": 96,
                  "offset": 2257,
                },
                "source": "types.test.js",
                "start": Object {
                  "column": 25,
                  "line": 96,
                  "offset": 2251,
                },
                "type": "SourceFile",
              },
              "path": "types.test.js",
              "start": 25,
              "type": "Blame",
            },
          ],
        },
        Object {
          "message": Array [
            Object {
              "context": "declare export class Store<State> implements Unit<State> {",
              "descr": "[3]",
              "end": 32,
              "endline": 63,
              "line": 63,
              "loc": Object {
                "end": Object {
                  "column": 32,
                  "line": 63,
                  "offset": 1661,
                },
                "source": "../../packages/effector/index.js.flow",
                "start": Object {
                  "column": 28,
                  "line": 63,
                  "offset": 1656,
                },
                "type": "SourceFile",
              },
              "path": "../../packages/effector/index.js.flow",
              "start": 28,
              "type": "Blame",
            },
          ],
        },
      ],
      "kind": "infer",
      "level": "error",
      "message": Array [
        Object {
          "context": "    const check2: Store<number> = computed",
          "descr": "Cannot assign \`computed\` to \`check2\` because string [1] is incompatible with number [2] in type argument \`State\` [3].",
          "end": 42,
          "endline": 96,
          "line": 96,
          "loc": Object {
            "end": Object {
              "column": 42,
              "line": 96,
              "offset": 2269,
            },
            "source": "types.test.js",
            "start": Object {
              "column": 35,
              "line": 96,
              "offset": 2261,
            },
            "type": "SourceFile",
          },
          "path": "types.test.js",
          "start": 35,
          "type": "Blame",
        },
      ],
      "suppressions": Array [],
    },
    Object {
      "extra": Array [
        Object {
          "message": Array [
            Object {
              "context": null,
              "descr": "References:",
              "end": 0,
              "endline": 0,
              "line": 0,
              "path": "",
              "start": 1,
              "type": "Blame",
            },
          ],
        },
        Object {
          "message": Array [
            Object {
              "context": "    const domain3 = createDomain(234)",
              "descr": "[1]",
              "end": 36,
              "endline": 178,
              "line": 178,
              "loc": Object {
                "end": Object {
                  "column": 36,
                  "line": 178,
                  "offset": 4408,
                },
                "source": "types.test.js",
                "start": Object {
                  "column": 34,
                  "line": 178,
                  "offset": 4405,
                },
                "type": "SourceFile",
              },
              "path": "types.test.js",
              "start": 34,
              "type": "Blame",
            },
          ],
        },
        Object {
          "message": Array [
            Object {
              "context": "declare export function createDomain(domainName?: string): Domain",
              "descr": "[2]",
              "end": 56,
              "endline": 232,
              "line": 232,
              "loc": Object {
                "end": Object {
                  "column": 56,
                  "line": 232,
                  "offset": 6314,
                },
                "source": "../../packages/effector/index.js.flow",
                "start": Object {
                  "column": 51,
                  "line": 232,
                  "offset": 6308,
                },
                "type": "SourceFile",
              },
              "path": "../../packages/effector/index.js.flow",
              "start": 51,
              "type": "Blame",
            },
          ],
        },
      ],
      "kind": "infer",
      "level": "error",
      "message": Array [
        Object {
          "context": "    const domain3 = createDomain(234)",
          "descr": "Cannot call \`createDomain\` with \`234\` bound to \`domainName\` because number [1] is incompatible with string [2].",
          "end": 36,
          "endline": 178,
          "line": 178,
          "loc": Object {
            "end": Object {
              "column": 36,
              "line": 178,
              "offset": 4408,
            },
            "source": "types.test.js",
            "start": Object {
              "column": 34,
              "line": 178,
              "offset": 4405,
            },
            "type": "SourceFile",
          },
          "path": "types.test.js",
          "start": 34,
          "type": "Blame",
        },
      ],
      "suppressions": Array [],
    },
    Object {
      "extra": Array [
        Object {
          "message": Array [
            Object {
              "context": null,
              "descr": "References:",
              "end": 0,
              "endline": 0,
              "line": 0,
              "path": "",
              "start": 1,
              "type": "Blame",
            },
          ],
        },
        Object {
          "message": Array [
            Object {
              "context": "    const domain4 = createDomain({foo: true})",
              "descr": "[1]",
              "end": 44,
              "endline": 179,
              "line": 179,
              "loc": Object {
                "end": Object {
                  "column": 44,
                  "line": 179,
                  "offset": 4454,
                },
                "source": "types.test.js",
                "start": Object {
                  "column": 34,
                  "line": 179,
                  "offset": 4443,
                },
                "type": "SourceFile",
              },
              "path": "types.test.js",
              "start": 34,
              "type": "Blame",
            },
          ],
        },
        Object {
          "message": Array [
            Object {
              "context": "declare export function createDomain(domainName?: string): Domain",
              "descr": "[2]",
              "end": 56,
              "endline": 232,
              "line": 232,
              "loc": Object {
                "end": Object {
                  "column": 56,
                  "line": 232,
                  "offset": 6314,
                },
                "source": "../../packages/effector/index.js.flow",
                "start": Object {
                  "column": 51,
                  "line": 232,
                  "offset": 6308,
                },
                "type": "SourceFile",
              },
              "path": "../../packages/effector/index.js.flow",
              "start": 51,
              "type": "Blame",
            },
          ],
        },
      ],
      "kind": "infer",
      "level": "error",
      "message": Array [
        Object {
          "context": "    const domain4 = createDomain({foo: true})",
          "descr": "Cannot call \`createDomain\` with object literal bound to \`domainName\` because object literal [1] is incompatible with string [2].",
          "end": 44,
          "endline": 179,
          "line": 179,
          "loc": Object {
            "end": Object {
              "column": 44,
              "line": 179,
              "offset": 4454,
            },
            "source": "types.test.js",
            "start": Object {
              "column": 34,
              "line": 179,
              "offset": 4443,
            },
            "type": "SourceFile",
          },
          "path": "types.test.js",
          "start": 34,
          "type": "Blame",
        },
      ],
      "suppressions": Array [],
    },
  ],
  "flowVersion": "0.93.0",
  "jsonVersion": "1",
  "passed": false,
}
`;

exports[`TypeScript: rejected 1`] = `
"Command failed: npx tsc -p src/types

packages/effector/index.d.ts(69,49): error TS2304: Cannot find name 'Unit'.
packages/effector/index.d.ts(72,51): error TS2707: Generic type 'Effect<Params, Done, Fail>' requires between 2 and 3 type arguments.
src/types/types.test.ts(15,14): error TS2305: Module '\\"../../../../../../../../../../../Users/goodmind/Clouds/MEGAsync/development/web/projects/pending/effector/packages/effector\\"' has no exported member 'kind'.
src/types/types.test.ts(17,3): error TS2305: Module '\\"../../../../../../../../../../../Users/goodmind/Clouds/MEGAsync/development/web/projects/pending/effector/packages/effector\\"' has no exported member 'relay'.
src/types/types.test.ts(18,3): error TS2305: Module '\\"../../../../../../../../../../../Users/goodmind/Clouds/MEGAsync/development/web/projects/pending/effector/packages/effector\\"' has no exported member 'relayShape'.
src/types/types.test.ts(30,11): error TS2322: Type 'Event<string>' is not assignable to type 'Event<number>'.
  Types of property 'watch' are incompatible.
    Type '(watcher: (payload: string) => any) => Subscription' is not assignable to type '(watcher: (payload: number) => any) => Subscription'.
      Types of parameters 'watcher' and 'watcher' are incompatible.
        Types of parameters 'payload' and 'payload' are incompatible.
          Type 'string' is not assignable to type 'number'.
src/types/types.test.ts(45,11): error TS2322: Type 'Store<number>' is not assignable to type 'Store<string>'.
  Type 'number' is not assignable to type 'string'.
src/types/types.test.ts(72,30): error TS2339: Property 'kind' does not exist on type 'Store<number>'.
src/types/types.test.ts(77,34): error TS2339: Property 'kind' does not exist on type 'Store<string>'.
src/types/types.test.ts(96,11): error TS2322: Type 'Store<string>' is not assignable to type 'Store<number>'.
  Type 'string' is not assignable to type 'number'.
src/types/types.test.ts(141,13): error TS2322: Type '{}' is not assignable to type 'undefined'.
src/types/types.test.ts(150,13): error TS2322: Type '{}' is not assignable to type 'undefined'.
src/types/types.test.ts(178,34): error TS2345: Argument of type '234' is not assignable to parameter of type 'string | undefined'.
src/types/types.test.ts(179,34): error TS2345: Argument of type '{ foo: boolean; }' is not assignable to parameter of type 'string'.
"
`;
