// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Flow: json messages 1`] = `
Array [
  Array [
    "Cannot assign \`c\` to \`check2\` because number [1] is incompatible with string [2] in type argument \`Payload\` [3].",
  ],
  Array [
    "Cannot assign \`e\` to \`check4\` because number [1] is incompatible with string [2] in type argument \`State\` [3].",
  ],
  Array [
    "Cannot assign \`g\` to \`check6\` because string [1] is incompatible with number [2] in type argument \`Payload\` [3].",
  ],
  Array [
    "Cannot assign \`computed\` to \`check2\` because string [1] is incompatible with number [2] in type argument \`Payload\` [3].",
  ],
  Array [
    "Cannot assign \`createStore(...)\` to \`store2\` because number [1] is incompatible with string [2] in type argument \`State\` [3].",
  ],
  Array [
    "Cannot assign \`computed\` to \`check2\` because string [1] is incompatible with number [2] in type argument \`State\` [3].",
  ],
  Array [
    "Cannot call \`createDomain\` with \`234\` bound to \`domainName\` because number [1] is incompatible with string [2].",
  ],
  Array [
    "Cannot call \`createDomain\` with object literal bound to \`domainName\` because object literal [1] is incompatible with string [2].",
  ],
]
`;

exports[`Flow: json rejected 1`] = `
Object {
  "errors": Array [
    Object {
      "extra": Array [
        Object {
          "message": Array [
            Object {
              "context": null,
              "descr": "References:",
              "end": 0,
              "endline": 0,
              "line": 0,
              "path": "",
              "start": 1,
              "type": "Blame",
            },
          ],
        },
        Object {
          "message": Array [
            Object {
              "context": "    const a = createEvent<number>()",
              "descr": "[1]",
              "end": 32,
              "endline": 24,
              "line": 24,
              "loc": Object {
                "end": Object {
                  "column": 32,
                  "line": 24,
                  "offset": 413,
                },
                "source": "types.test.js",
                "start": Object {
                  "column": 27,
                  "line": 24,
                  "offset": 407,
                },
                "type": "SourceFile",
              },
              "path": "types.test.js",
              "start": 27,
              "type": "Blame",
            },
          ],
        },
        Object {
          "message": Array [
            Object {
              "context": "    const check2: Event<string> = c",
              "descr": "[2]",
              "end": 30,
              "endline": 29,
              "line": 29,
              "loc": Object {
                "end": Object {
                  "column": 30,
                  "line": 29,
                  "offset": 548,
                },
                "source": "types.test.js",
                "start": Object {
                  "column": 25,
                  "line": 29,
                  "offset": 542,
                },
                "type": "SourceFile",
              },
              "path": "types.test.js",
              "start": 25,
              "type": "Blame",
            },
          ],
        },
        Object {
          "message": Array [
            Object {
              "context": "declare export class Event<Payload> implements Unit<Payload> {",
              "descr": "[3]",
              "end": 34,
              "endline": 29,
              "line": 29,
              "loc": Object {
                "end": Object {
                  "column": 34,
                  "line": 29,
                  "offset": 484,
                },
                "source": "../../packages/effector/index.js.flow",
                "start": Object {
                  "column": 28,
                  "line": 29,
                  "offset": 477,
                },
                "type": "SourceFile",
              },
              "path": "../../packages/effector/index.js.flow",
              "start": 28,
              "type": "Blame",
            },
          ],
        },
      ],
      "kind": "infer",
      "level": "error",
      "message": Array [
        Object {
          "context": "    const check2: Event<string> = c",
          "descr": "Cannot assign \`c\` to \`check2\` because number [1] is incompatible with string [2] in type argument \`Payload\` [3].",
          "end": 35,
          "endline": 29,
          "line": 29,
          "loc": Object {
            "end": Object {
              "column": 35,
              "line": 29,
              "offset": 553,
            },
            "source": "types.test.js",
            "start": Object {
              "column": 35,
              "line": 29,
              "offset": 552,
            },
            "type": "SourceFile",
          },
          "path": "types.test.js",
          "start": 35,
          "type": "Blame",
        },
      ],
      "suppressions": Array [],
    },
    Object {
      "extra": Array [
        Object {
          "message": Array [
            Object {
              "context": null,
              "descr": "References:",
              "end": 0,
              "endline": 0,
              "line": 0,
              "path": "",
              "start": 1,
              "type": "Blame",
            },
          ],
        },
        Object {
          "message": Array [
            Object {
              "context": "    const check3: Store<number> = e",
              "descr": "[1]",
              "end": 30,
              "endline": 34,
              "line": 34,
              "loc": Object {
                "end": Object {
                  "column": 30,
                  "line": 34,
                  "offset": 642,
                },
                "source": "types.test.js",
                "start": Object {
                  "column": 25,
                  "line": 34,
                  "offset": 636,
                },
                "type": "SourceFile",
              },
              "path": "types.test.js",
              "start": 25,
              "type": "Blame",
            },
          ],
        },
        Object {
          "message": Array [
            Object {
              "context": "    const check4: Store<string> = e",
              "descr": "[2]",
              "end": 30,
              "endline": 35,
              "line": 35,
              "loc": Object {
                "end": Object {
                  "column": 30,
                  "line": 35,
                  "offset": 678,
                },
                "source": "types.test.js",
                "start": Object {
                  "column": 25,
                  "line": 35,
                  "offset": 672,
                },
                "type": "SourceFile",
              },
              "path": "types.test.js",
              "start": 25,
              "type": "Blame",
            },
          ],
        },
        Object {
          "message": Array [
            Object {
              "context": "declare export class Store<State> implements Unit<State> {",
              "descr": "[3]",
              "end": 32,
              "endline": 69,
              "line": 69,
              "loc": Object {
                "end": Object {
                  "column": 32,
                  "line": 69,
                  "offset": 1722,
                },
                "source": "../../packages/effector/index.js.flow",
                "start": Object {
                  "column": 28,
                  "line": 69,
                  "offset": 1717,
                },
                "type": "SourceFile",
              },
              "path": "../../packages/effector/index.js.flow",
              "start": 28,
              "type": "Blame",
            },
          ],
        },
      ],
      "kind": "infer",
      "level": "error",
      "message": Array [
        Object {
          "context": "    const check4: Store<string> = e",
          "descr": "Cannot assign \`e\` to \`check4\` because number [1] is incompatible with string [2] in type argument \`State\` [3].",
          "end": 35,
          "endline": 35,
          "line": 35,
          "loc": Object {
            "end": Object {
              "column": 35,
              "line": 35,
              "offset": 683,
            },
            "source": "types.test.js",
            "start": Object {
              "column": 35,
              "line": 35,
              "offset": 682,
            },
            "type": "SourceFile",
          },
          "path": "types.test.js",
          "start": 35,
          "type": "Blame",
        },
      ],
      "suppressions": Array [],
    },
    Object {
      "extra": Array [
        Object {
          "message": Array [
            Object {
              "context": null,
              "descr": "References:",
              "end": 0,
              "endline": 0,
              "line": 0,
              "path": "",
              "start": 1,
              "type": "Blame",
            },
          ],
        },
        Object {
          "message": Array [
            Object {
              "context": "    const f = createEffect<string, any, any>()",
              "descr": "[1]",
              "end": 33,
              "endline": 37,
              "line": 37,
              "loc": Object {
                "end": Object {
                  "column": 33,
                  "line": 37,
                  "offset": 718,
                },
                "source": "types.test.js",
                "start": Object {
                  "column": 28,
                  "line": 37,
                  "offset": 712,
                },
                "type": "SourceFile",
              },
              "path": "types.test.js",
              "start": 28,
              "type": "Blame",
            },
          ],
        },
        Object {
          "message": Array [
            Object {
              "context": "    const check6: Event<number> = g",
              "descr": "[2]",
              "end": 30,
              "endline": 41,
              "line": 41,
              "loc": Object {
                "end": Object {
                  "column": 30,
                  "line": 41,
                  "offset": 826,
                },
                "source": "types.test.js",
                "start": Object {
                  "column": 25,
                  "line": 41,
                  "offset": 820,
                },
                "type": "SourceFile",
              },
              "path": "types.test.js",
              "start": 25,
              "type": "Blame",
            },
          ],
        },
        Object {
          "message": Array [
            Object {
              "context": "declare export class Event<Payload> implements Unit<Payload> {",
              "descr": "[3]",
              "end": 34,
              "endline": 29,
              "line": 29,
              "loc": Object {
                "end": Object {
                  "column": 34,
                  "line": 29,
                  "offset": 484,
                },
                "source": "../../packages/effector/index.js.flow",
                "start": Object {
                  "column": 28,
                  "line": 29,
                  "offset": 477,
                },
                "type": "SourceFile",
              },
              "path": "../../packages/effector/index.js.flow",
              "start": 28,
              "type": "Blame",
            },
          ],
        },
      ],
      "kind": "infer",
      "level": "error",
      "message": Array [
        Object {
          "context": "    const check6: Event<number> = g",
          "descr": "Cannot assign \`g\` to \`check6\` because string [1] is incompatible with number [2] in type argument \`Payload\` [3].",
          "end": 35,
          "endline": 41,
          "line": 41,
          "loc": Object {
            "end": Object {
              "column": 35,
              "line": 41,
              "offset": 831,
            },
            "source": "types.test.js",
            "start": Object {
              "column": 35,
              "line": 41,
              "offset": 830,
            },
            "type": "SourceFile",
          },
          "path": "types.test.js",
          "start": 35,
          "type": "Blame",
        },
      ],
      "suppressions": Array [],
    },
    Object {
      "extra": Array [
        Object {
          "message": Array [
            Object {
              "context": null,
              "descr": "References:",
              "end": 0,
              "endline": 0,
              "line": 0,
              "path": "",
              "start": 1,
              "type": "Blame",
            },
          ],
        },
        Object {
          "message": Array [
            Object {
              "context": "    const check1: Event<string> = computed",
              "descr": "[1]",
              "end": 30,
              "endline": 53,
              "line": 53,
              "loc": Object {
                "end": Object {
                  "column": 30,
                  "line": 53,
                  "offset": 1095,
                },
                "source": "types.test.js",
                "start": Object {
                  "column": 25,
                  "line": 53,
                  "offset": 1089,
                },
                "type": "SourceFile",
              },
              "path": "types.test.js",
              "start": 25,
              "type": "Blame",
            },
          ],
        },
        Object {
          "message": Array [
            Object {
              "context": "    const check2: Event<number> = computed",
              "descr": "[2]",
              "end": 30,
              "endline": 54,
              "line": 54,
              "loc": Object {
                "end": Object {
                  "column": 30,
                  "line": 54,
                  "offset": 1138,
                },
                "source": "types.test.js",
                "start": Object {
                  "column": 25,
                  "line": 54,
                  "offset": 1132,
                },
                "type": "SourceFile",
              },
              "path": "types.test.js",
              "start": 25,
              "type": "Blame",
            },
          ],
        },
        Object {
          "message": Array [
            Object {
              "context": "declare export class Event<Payload> implements Unit<Payload> {",
              "descr": "[3]",
              "end": 34,
              "endline": 29,
              "line": 29,
              "loc": Object {
                "end": Object {
                  "column": 34,
                  "line": 29,
                  "offset": 484,
                },
                "source": "../../packages/effector/index.js.flow",
                "start": Object {
                  "column": 28,
                  "line": 29,
                  "offset": 477,
                },
                "type": "SourceFile",
              },
              "path": "../../packages/effector/index.js.flow",
              "start": 28,
              "type": "Blame",
            },
          ],
        },
      ],
      "kind": "infer",
      "level": "error",
      "message": Array [
        Object {
          "context": "    const check2: Event<number> = computed",
          "descr": "Cannot assign \`computed\` to \`check2\` because string [1] is incompatible with number [2] in type argument \`Payload\` [3].",
          "end": 42,
          "endline": 54,
          "line": 54,
          "loc": Object {
            "end": Object {
              "column": 42,
              "line": 54,
              "offset": 1150,
            },
            "source": "types.test.js",
            "start": Object {
              "column": 35,
              "line": 54,
              "offset": 1142,
            },
            "type": "SourceFile",
          },
          "path": "types.test.js",
          "start": 35,
          "type": "Blame",
        },
      ],
      "suppressions": Array [],
    },
    Object {
      "extra": Array [
        Object {
          "message": Array [
            Object {
              "context": null,
              "descr": "References:",
              "end": 0,
              "endline": 0,
              "line": 0,
              "path": "",
              "start": 1,
              "type": "Blame",
            },
          ],
        },
        Object {
          "message": Array [
            Object {
              "context": "    const store2: Store<string> = createStore(0)",
              "descr": "[1]",
              "end": 47,
              "endline": 69,
              "line": 69,
              "loc": Object {
                "end": Object {
                  "column": 47,
                  "line": 69,
                  "offset": 1468,
                },
                "source": "types.test.js",
                "start": Object {
                  "column": 47,
                  "line": 69,
                  "offset": 1467,
                },
                "type": "SourceFile",
              },
              "path": "types.test.js",
              "start": 47,
              "type": "Blame",
            },
          ],
        },
        Object {
          "message": Array [
            Object {
              "context": "    const store2: Store<string> = createStore(0)",
              "descr": "[2]",
              "end": 30,
              "endline": 69,
              "line": 69,
              "loc": Object {
                "end": Object {
                  "column": 30,
                  "line": 69,
                  "offset": 1451,
                },
                "source": "types.test.js",
                "start": Object {
                  "column": 25,
                  "line": 69,
                  "offset": 1445,
                },
                "type": "SourceFile",
              },
              "path": "types.test.js",
              "start": 25,
              "type": "Blame",
            },
          ],
        },
        Object {
          "message": Array [
            Object {
              "context": "declare export class Store<State> implements Unit<State> {",
              "descr": "[3]",
              "end": 32,
              "endline": 69,
              "line": 69,
              "loc": Object {
                "end": Object {
                  "column": 32,
                  "line": 69,
                  "offset": 1722,
                },
                "source": "../../packages/effector/index.js.flow",
                "start": Object {
                  "column": 28,
                  "line": 69,
                  "offset": 1717,
                },
                "type": "SourceFile",
              },
              "path": "../../packages/effector/index.js.flow",
              "start": 28,
              "type": "Blame",
            },
          ],
        },
      ],
      "kind": "infer",
      "level": "error",
      "message": Array [
        Object {
          "context": "    const store2: Store<string> = createStore(0)",
          "descr": "Cannot assign \`createStore(...)\` to \`store2\` because number [1] is incompatible with string [2] in type argument \`State\` [3].",
          "end": 47,
          "endline": 69,
          "line": 69,
          "loc": Object {
            "end": Object {
              "column": 47,
              "line": 69,
              "offset": 1468,
            },
            "source": "types.test.js",
            "start": Object {
              "column": 47,
              "line": 69,
              "offset": 1467,
            },
            "type": "SourceFile",
          },
          "path": "types.test.js",
          "start": 47,
          "type": "Blame",
        },
      ],
      "suppressions": Array [],
    },
    Object {
      "extra": Array [
        Object {
          "message": Array [
            Object {
              "context": null,
              "descr": "References:",
              "end": 0,
              "endline": 0,
              "line": 0,
              "path": "",
              "start": 1,
              "type": "Blame",
            },
          ],
        },
        Object {
          "message": Array [
            Object {
              "context": "    const check1: Store<string> = computed",
              "descr": "[1]",
              "end": 30,
              "endline": 118,
              "line": 118,
              "loc": Object {
                "end": Object {
                  "column": 30,
                  "line": 118,
                  "offset": 2799,
                },
                "source": "types.test.js",
                "start": Object {
                  "column": 25,
                  "line": 118,
                  "offset": 2793,
                },
                "type": "SourceFile",
              },
              "path": "types.test.js",
              "start": 25,
              "type": "Blame",
            },
          ],
        },
        Object {
          "message": Array [
            Object {
              "context": "    const check2: Store<number> = computed",
              "descr": "[2]",
              "end": 30,
              "endline": 120,
              "line": 120,
              "loc": Object {
                "end": Object {
                  "column": 30,
                  "line": 120,
                  "offset": 2843,
                },
                "source": "types.test.js",
                "start": Object {
                  "column": 25,
                  "line": 120,
                  "offset": 2837,
                },
                "type": "SourceFile",
              },
              "path": "types.test.js",
              "start": 25,
              "type": "Blame",
            },
          ],
        },
        Object {
          "message": Array [
            Object {
              "context": "declare export class Store<State> implements Unit<State> {",
              "descr": "[3]",
              "end": 32,
              "endline": 69,
              "line": 69,
              "loc": Object {
                "end": Object {
                  "column": 32,
                  "line": 69,
                  "offset": 1722,
                },
                "source": "../../packages/effector/index.js.flow",
                "start": Object {
                  "column": 28,
                  "line": 69,
                  "offset": 1717,
                },
                "type": "SourceFile",
              },
              "path": "../../packages/effector/index.js.flow",
              "start": 28,
              "type": "Blame",
            },
          ],
        },
      ],
      "kind": "infer",
      "level": "error",
      "message": Array [
        Object {
          "context": "    const check2: Store<number> = computed",
          "descr": "Cannot assign \`computed\` to \`check2\` because string [1] is incompatible with number [2] in type argument \`State\` [3].",
          "end": 42,
          "endline": 120,
          "line": 120,
          "loc": Object {
            "end": Object {
              "column": 42,
              "line": 120,
              "offset": 2855,
            },
            "source": "types.test.js",
            "start": Object {
              "column": 35,
              "line": 120,
              "offset": 2847,
            },
            "type": "SourceFile",
          },
          "path": "types.test.js",
          "start": 35,
          "type": "Blame",
        },
      ],
      "suppressions": Array [],
    },
    Object {
      "extra": Array [
        Object {
          "message": Array [
            Object {
              "context": null,
              "descr": "References:",
              "end": 0,
              "endline": 0,
              "line": 0,
              "path": "",
              "start": 1,
              "type": "Blame",
            },
          ],
        },
        Object {
          "message": Array [
            Object {
              "context": "    const domain3 = createDomain(234)",
              "descr": "[1]",
              "end": 36,
              "endline": 202,
              "line": 202,
              "loc": Object {
                "end": Object {
                  "column": 36,
                  "line": 202,
                  "offset": 4982,
                },
                "source": "types.test.js",
                "start": Object {
                  "column": 34,
                  "line": 202,
                  "offset": 4979,
                },
                "type": "SourceFile",
              },
              "path": "types.test.js",
              "start": 34,
              "type": "Blame",
            },
          ],
        },
        Object {
          "message": Array [
            Object {
              "context": "declare export function createDomain(domainName?: string): Domain",
              "descr": "[2]",
              "end": 56,
              "endline": 323,
              "line": 323,
              "loc": Object {
                "end": Object {
                  "column": 56,
                  "line": 323,
                  "offset": 7983,
                },
                "source": "../../packages/effector/index.js.flow",
                "start": Object {
                  "column": 51,
                  "line": 323,
                  "offset": 7977,
                },
                "type": "SourceFile",
              },
              "path": "../../packages/effector/index.js.flow",
              "start": 51,
              "type": "Blame",
            },
          ],
        },
      ],
      "kind": "infer",
      "level": "error",
      "message": Array [
        Object {
          "context": "    const domain3 = createDomain(234)",
          "descr": "Cannot call \`createDomain\` with \`234\` bound to \`domainName\` because number [1] is incompatible with string [2].",
          "end": 36,
          "endline": 202,
          "line": 202,
          "loc": Object {
            "end": Object {
              "column": 36,
              "line": 202,
              "offset": 4982,
            },
            "source": "types.test.js",
            "start": Object {
              "column": 34,
              "line": 202,
              "offset": 4979,
            },
            "type": "SourceFile",
          },
          "path": "types.test.js",
          "start": 34,
          "type": "Blame",
        },
      ],
      "suppressions": Array [],
    },
    Object {
      "extra": Array [
        Object {
          "message": Array [
            Object {
              "context": null,
              "descr": "References:",
              "end": 0,
              "endline": 0,
              "line": 0,
              "path": "",
              "start": 1,
              "type": "Blame",
            },
          ],
        },
        Object {
          "message": Array [
            Object {
              "context": "    const domain4 = createDomain({foo: true})",
              "descr": "[1]",
              "end": 44,
              "endline": 203,
              "line": 203,
              "loc": Object {
                "end": Object {
                  "column": 44,
                  "line": 203,
                  "offset": 5028,
                },
                "source": "types.test.js",
                "start": Object {
                  "column": 34,
                  "line": 203,
                  "offset": 5017,
                },
                "type": "SourceFile",
              },
              "path": "types.test.js",
              "start": 34,
              "type": "Blame",
            },
          ],
        },
        Object {
          "message": Array [
            Object {
              "context": "declare export function createDomain(domainName?: string): Domain",
              "descr": "[2]",
              "end": 56,
              "endline": 323,
              "line": 323,
              "loc": Object {
                "end": Object {
                  "column": 56,
                  "line": 323,
                  "offset": 7983,
                },
                "source": "../../packages/effector/index.js.flow",
                "start": Object {
                  "column": 51,
                  "line": 323,
                  "offset": 7977,
                },
                "type": "SourceFile",
              },
              "path": "../../packages/effector/index.js.flow",
              "start": 51,
              "type": "Blame",
            },
          ],
        },
      ],
      "kind": "infer",
      "level": "error",
      "message": Array [
        Object {
          "context": "    const domain4 = createDomain({foo: true})",
          "descr": "Cannot call \`createDomain\` with object literal bound to \`domainName\` because object literal [1] is incompatible with string [2].",
          "end": 44,
          "endline": 203,
          "line": 203,
          "loc": Object {
            "end": Object {
              "column": 44,
              "line": 203,
              "offset": 5028,
            },
            "source": "types.test.js",
            "start": Object {
              "column": 34,
              "line": 203,
              "offset": 5017,
            },
            "type": "SourceFile",
          },
          "path": "types.test.js",
          "start": 34,
          "type": "Blame",
        },
      ],
      "suppressions": Array [],
    },
  ],
  "flowVersion": "0.98.0",
  "jsonVersion": "1",
  "passed": false,
}
`;

exports[`TypeScript: rejected 1`] = `
"Command failed: npx tsc -p src/types

src/types/types.test.ts(29,11): error TS2322: Type 'Event<number>' is not assignable to type 'Event<string>'.
  Type 'number' is not assignable to type 'string'.
src/types/types.test.ts(35,11): error TS2322: Type 'Store<number>' is not assignable to type 'Store<string>'.
  Type 'number' is not assignable to type 'string'.
src/types/types.test.ts(41,11): error TS2322: Type 'Event<string>' is not assignable to type 'Event<number>'.
  Type 'string' is not assignable to type 'number'.
src/types/types.test.ts(54,11): error TS2322: Type 'Event<string>' is not assignable to type 'Event<number>'.
src/types/types.test.ts(69,11): error TS2322: Type 'Store<number>' is not assignable to type 'Store<string>'.
src/types/types.test.ts(120,11): error TS2322: Type 'Store<string>' is not assignable to type 'Store<number>'.
  Type 'string' is not assignable to type 'number'.
src/types/types.test.ts(202,34): error TS2345: Argument of type '234' is not assignable to parameter of type 'string | undefined'.
src/types/types.test.ts(203,34): error TS2345: Argument of type '{ foo: boolean; }' is not assignable to parameter of type 'string'.
"
`;
