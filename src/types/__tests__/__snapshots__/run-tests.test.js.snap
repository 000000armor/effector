// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Flow: json messages 1`] = `
Array [
  Array [
    "Cannot assign \`computed\` to \`check2\` because string [1] is incompatible with number [2] in type argument \`Payload\` [3].",
  ],
  Array [
    "Cannot assign \`createStore(...)\` to \`store2\` because number [1] is incompatible with string [2] in type argument \`State\` [3].",
  ],
  Array [
    "Cannot assign \`computed\` to \`check2\` because string [1] is incompatible with number [2] in type argument \`State\` [3].",
  ],
  Array [
    "Cannot call \`createDomain\` with \`234\` bound to \`domainName\` because number [1] is incompatible with string [2].",
  ],
  Array [
    "Cannot call \`createDomain\` with object literal bound to \`domainName\` because object literal [1] is incompatible with string [2].",
  ],
]
`;

exports[`Flow: json rejected 1`] = `
Object {
  "errors": Array [
    Object {
      "extra": Array [
        Object {
          "message": Array [
            Object {
              "context": null,
              "descr": "References:",
              "end": 0,
              "endline": 0,
              "line": 0,
              "path": "",
              "start": 1,
              "type": "Blame",
            },
          ],
        },
        Object {
          "message": Array [
            Object {
              "context": "    const check1: Event<string> = computed",
              "descr": "[1]",
              "end": 30,
              "endline": 30,
              "line": 30,
              "loc": Object {
                "end": Object {
                  "column": 30,
                  "line": 30,
                  "offset": 551,
                },
                "source": "types.test.js",
                "start": Object {
                  "column": 25,
                  "line": 30,
                  "offset": 545,
                },
                "type": "SourceFile",
              },
              "path": "types.test.js",
              "start": 25,
              "type": "Blame",
            },
          ],
        },
        Object {
          "message": Array [
            Object {
              "context": "    const check2: Event<number> = computed",
              "descr": "[2]",
              "end": 30,
              "endline": 31,
              "line": 31,
              "loc": Object {
                "end": Object {
                  "column": 30,
                  "line": 31,
                  "offset": 594,
                },
                "source": "types.test.js",
                "start": Object {
                  "column": 25,
                  "line": 31,
                  "offset": 588,
                },
                "type": "SourceFile",
              },
              "path": "types.test.js",
              "start": 25,
              "type": "Blame",
            },
          ],
        },
        Object {
          "message": Array [
            Object {
              "context": "declare export class Event<Payload> implements Unit<Payload> {",
              "descr": "[3]",
              "end": 34,
              "endline": 27,
              "line": 27,
              "loc": Object {
                "end": Object {
                  "column": 34,
                  "line": 27,
                  "offset": 444,
                },
                "source": "../../packages/effector/index.js.flow",
                "start": Object {
                  "column": 28,
                  "line": 27,
                  "offset": 437,
                },
                "type": "SourceFile",
              },
              "path": "../../packages/effector/index.js.flow",
              "start": 28,
              "type": "Blame",
            },
          ],
        },
      ],
      "kind": "infer",
      "level": "error",
      "message": Array [
        Object {
          "context": "    const check2: Event<number> = computed",
          "descr": "Cannot assign \`computed\` to \`check2\` because string [1] is incompatible with number [2] in type argument \`Payload\` [3].",
          "end": 42,
          "endline": 31,
          "line": 31,
          "loc": Object {
            "end": Object {
              "column": 42,
              "line": 31,
              "offset": 606,
            },
            "source": "types.test.js",
            "start": Object {
              "column": 35,
              "line": 31,
              "offset": 598,
            },
            "type": "SourceFile",
          },
          "path": "types.test.js",
          "start": 35,
          "type": "Blame",
        },
      ],
      "suppressions": Array [],
    },
    Object {
      "extra": Array [
        Object {
          "message": Array [
            Object {
              "context": null,
              "descr": "References:",
              "end": 0,
              "endline": 0,
              "line": 0,
              "path": "",
              "start": 1,
              "type": "Blame",
            },
          ],
        },
        Object {
          "message": Array [
            Object {
              "context": "    const store2: Store<string> = createStore(0)",
              "descr": "[1]",
              "end": 47,
              "endline": 46,
              "line": 46,
              "loc": Object {
                "end": Object {
                  "column": 47,
                  "line": 46,
                  "offset": 924,
                },
                "source": "types.test.js",
                "start": Object {
                  "column": 47,
                  "line": 46,
                  "offset": 923,
                },
                "type": "SourceFile",
              },
              "path": "types.test.js",
              "start": 47,
              "type": "Blame",
            },
          ],
        },
        Object {
          "message": Array [
            Object {
              "context": "    const store2: Store<string> = createStore(0)",
              "descr": "[2]",
              "end": 30,
              "endline": 46,
              "line": 46,
              "loc": Object {
                "end": Object {
                  "column": 30,
                  "line": 46,
                  "offset": 907,
                },
                "source": "types.test.js",
                "start": Object {
                  "column": 25,
                  "line": 46,
                  "offset": 901,
                },
                "type": "SourceFile",
              },
              "path": "types.test.js",
              "start": 25,
              "type": "Blame",
            },
          ],
        },
        Object {
          "message": Array [
            Object {
              "context": "declare export class Store<State> implements Unit<State> {",
              "descr": "[3]",
              "end": 32,
              "endline": 67,
              "line": 67,
              "loc": Object {
                "end": Object {
                  "column": 32,
                  "line": 67,
                  "offset": 1690,
                },
                "source": "../../packages/effector/index.js.flow",
                "start": Object {
                  "column": 28,
                  "line": 67,
                  "offset": 1685,
                },
                "type": "SourceFile",
              },
              "path": "../../packages/effector/index.js.flow",
              "start": 28,
              "type": "Blame",
            },
          ],
        },
      ],
      "kind": "infer",
      "level": "error",
      "message": Array [
        Object {
          "context": "    const store2: Store<string> = createStore(0)",
          "descr": "Cannot assign \`createStore(...)\` to \`store2\` because number [1] is incompatible with string [2] in type argument \`State\` [3].",
          "end": 47,
          "endline": 46,
          "line": 46,
          "loc": Object {
            "end": Object {
              "column": 47,
              "line": 46,
              "offset": 924,
            },
            "source": "types.test.js",
            "start": Object {
              "column": 47,
              "line": 46,
              "offset": 923,
            },
            "type": "SourceFile",
          },
          "path": "types.test.js",
          "start": 47,
          "type": "Blame",
        },
      ],
      "suppressions": Array [],
    },
    Object {
      "extra": Array [
        Object {
          "message": Array [
            Object {
              "context": null,
              "descr": "References:",
              "end": 0,
              "endline": 0,
              "line": 0,
              "path": "",
              "start": 1,
              "type": "Blame",
            },
          ],
        },
        Object {
          "message": Array [
            Object {
              "context": "    const check1: Store<string> = computed",
              "descr": "[1]",
              "end": 30,
              "endline": 95,
              "line": 95,
              "loc": Object {
                "end": Object {
                  "column": 30,
                  "line": 95,
                  "offset": 2255,
                },
                "source": "types.test.js",
                "start": Object {
                  "column": 25,
                  "line": 95,
                  "offset": 2249,
                },
                "type": "SourceFile",
              },
              "path": "types.test.js",
              "start": 25,
              "type": "Blame",
            },
          ],
        },
        Object {
          "message": Array [
            Object {
              "context": "    const check2: Store<number> = computed",
              "descr": "[2]",
              "end": 30,
              "endline": 97,
              "line": 97,
              "loc": Object {
                "end": Object {
                  "column": 30,
                  "line": 97,
                  "offset": 2299,
                },
                "source": "types.test.js",
                "start": Object {
                  "column": 25,
                  "line": 97,
                  "offset": 2293,
                },
                "type": "SourceFile",
              },
              "path": "types.test.js",
              "start": 25,
              "type": "Blame",
            },
          ],
        },
        Object {
          "message": Array [
            Object {
              "context": "declare export class Store<State> implements Unit<State> {",
              "descr": "[3]",
              "end": 32,
              "endline": 67,
              "line": 67,
              "loc": Object {
                "end": Object {
                  "column": 32,
                  "line": 67,
                  "offset": 1690,
                },
                "source": "../../packages/effector/index.js.flow",
                "start": Object {
                  "column": 28,
                  "line": 67,
                  "offset": 1685,
                },
                "type": "SourceFile",
              },
              "path": "../../packages/effector/index.js.flow",
              "start": 28,
              "type": "Blame",
            },
          ],
        },
      ],
      "kind": "infer",
      "level": "error",
      "message": Array [
        Object {
          "context": "    const check2: Store<number> = computed",
          "descr": "Cannot assign \`computed\` to \`check2\` because string [1] is incompatible with number [2] in type argument \`State\` [3].",
          "end": 42,
          "endline": 97,
          "line": 97,
          "loc": Object {
            "end": Object {
              "column": 42,
              "line": 97,
              "offset": 2311,
            },
            "source": "types.test.js",
            "start": Object {
              "column": 35,
              "line": 97,
              "offset": 2303,
            },
            "type": "SourceFile",
          },
          "path": "types.test.js",
          "start": 35,
          "type": "Blame",
        },
      ],
      "suppressions": Array [],
    },
    Object {
      "extra": Array [
        Object {
          "message": Array [
            Object {
              "context": null,
              "descr": "References:",
              "end": 0,
              "endline": 0,
              "line": 0,
              "path": "",
              "start": 1,
              "type": "Blame",
            },
          ],
        },
        Object {
          "message": Array [
            Object {
              "context": "    const domain3 = createDomain(234)",
              "descr": "[1]",
              "end": 36,
              "endline": 179,
              "line": 179,
              "loc": Object {
                "end": Object {
                  "column": 36,
                  "line": 179,
                  "offset": 4438,
                },
                "source": "types.test.js",
                "start": Object {
                  "column": 34,
                  "line": 179,
                  "offset": 4435,
                },
                "type": "SourceFile",
              },
              "path": "types.test.js",
              "start": 34,
              "type": "Blame",
            },
          ],
        },
        Object {
          "message": Array [
            Object {
              "context": "declare export function createDomain(domainName?: string): Domain",
              "descr": "[2]",
              "end": 56,
              "endline": 240,
              "line": 240,
              "loc": Object {
                "end": Object {
                  "column": 56,
                  "line": 240,
                  "offset": 6480,
                },
                "source": "../../packages/effector/index.js.flow",
                "start": Object {
                  "column": 51,
                  "line": 240,
                  "offset": 6474,
                },
                "type": "SourceFile",
              },
              "path": "../../packages/effector/index.js.flow",
              "start": 51,
              "type": "Blame",
            },
          ],
        },
      ],
      "kind": "infer",
      "level": "error",
      "message": Array [
        Object {
          "context": "    const domain3 = createDomain(234)",
          "descr": "Cannot call \`createDomain\` with \`234\` bound to \`domainName\` because number [1] is incompatible with string [2].",
          "end": 36,
          "endline": 179,
          "line": 179,
          "loc": Object {
            "end": Object {
              "column": 36,
              "line": 179,
              "offset": 4438,
            },
            "source": "types.test.js",
            "start": Object {
              "column": 34,
              "line": 179,
              "offset": 4435,
            },
            "type": "SourceFile",
          },
          "path": "types.test.js",
          "start": 34,
          "type": "Blame",
        },
      ],
      "suppressions": Array [],
    },
    Object {
      "extra": Array [
        Object {
          "message": Array [
            Object {
              "context": null,
              "descr": "References:",
              "end": 0,
              "endline": 0,
              "line": 0,
              "path": "",
              "start": 1,
              "type": "Blame",
            },
          ],
        },
        Object {
          "message": Array [
            Object {
              "context": "    const domain4 = createDomain({foo: true})",
              "descr": "[1]",
              "end": 44,
              "endline": 180,
              "line": 180,
              "loc": Object {
                "end": Object {
                  "column": 44,
                  "line": 180,
                  "offset": 4484,
                },
                "source": "types.test.js",
                "start": Object {
                  "column": 34,
                  "line": 180,
                  "offset": 4473,
                },
                "type": "SourceFile",
              },
              "path": "types.test.js",
              "start": 34,
              "type": "Blame",
            },
          ],
        },
        Object {
          "message": Array [
            Object {
              "context": "declare export function createDomain(domainName?: string): Domain",
              "descr": "[2]",
              "end": 56,
              "endline": 240,
              "line": 240,
              "loc": Object {
                "end": Object {
                  "column": 56,
                  "line": 240,
                  "offset": 6480,
                },
                "source": "../../packages/effector/index.js.flow",
                "start": Object {
                  "column": 51,
                  "line": 240,
                  "offset": 6474,
                },
                "type": "SourceFile",
              },
              "path": "../../packages/effector/index.js.flow",
              "start": 51,
              "type": "Blame",
            },
          ],
        },
      ],
      "kind": "infer",
      "level": "error",
      "message": Array [
        Object {
          "context": "    const domain4 = createDomain({foo: true})",
          "descr": "Cannot call \`createDomain\` with object literal bound to \`domainName\` because object literal [1] is incompatible with string [2].",
          "end": 44,
          "endline": 180,
          "line": 180,
          "loc": Object {
            "end": Object {
              "column": 44,
              "line": 180,
              "offset": 4484,
            },
            "source": "types.test.js",
            "start": Object {
              "column": 34,
              "line": 180,
              "offset": 4473,
            },
            "type": "SourceFile",
          },
          "path": "types.test.js",
          "start": 34,
          "type": "Blame",
        },
      ],
      "suppressions": Array [],
    },
  ],
  "flowVersion": "0.94.0",
  "jsonVersion": "1",
  "passed": false,
}
`;

exports[`TypeScript: rejected 1`] = `
"Command failed: npx tsc -p src/types

src/types/types.test.ts(31,11): error TS2322: Type 'Event<string>' is not assignable to type 'Event<number>'.
  Types of property 'watch' are incompatible.
    Type '(watcher: (payload: string) => any) => Subscription' is not assignable to type '(watcher: (payload: number) => any) => Subscription'.
      Types of parameters 'watcher' and 'watcher' are incompatible.
        Types of parameters 'payload' and 'payload' are incompatible.
          Type 'string' is not assignable to type 'number'.
src/types/types.test.ts(46,11): error TS2322: Type 'Store<number>' is not assignable to type 'Store<string>'.
  Type 'number' is not assignable to type 'string'.
src/types/types.test.ts(97,11): error TS2322: Type 'Store<string>' is not assignable to type 'Store<number>'.
  Type 'string' is not assignable to type 'number'.
src/types/types.test.ts(179,34): error TS2345: Argument of type '234' is not assignable to parameter of type 'string | undefined'.
src/types/types.test.ts(180,34): error TS2345: Argument of type '{ foo: boolean; }' is not assignable to parameter of type 'string'.
"
`;
