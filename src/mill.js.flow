//@flow

import type {Reducer} from './index.h'
import {createReducer} from './reducer'
import {joint} from './joint'

export type MillType<
  A = mixed,
  B = mixed,
  C = mixed,
  D = mixed,
> = Mill
  | MillA<A>
  | MillAB<A, B>
  | MillABC<A, B, C>
  | MillABCD<A, B, C, D>
export class Mill {
  parts: {} = {}
  and<A>(red: Reducer<A>): MillA<A> {
    return new MillA({
      a: red,
    })
  }
  joint<R>(fn: () => R): Reducer<R> {
    const reducer = createReducer()
    const joined = joint(fn, reducer)
    return joined
  }
}

export class MillA<A> {
  parts: {
    a: Reducer<A>,
  }
  constructor(parts: {
    a: Reducer<A>,
  }) {
    this.parts = parts
  }
  and<B>(red: Reducer<B>): MillAB<A, B> {
    return new MillAB({
      ...this.parts,
      b: red,
    })
  }
  joint<R>(fn: (a: A) => R): Reducer<R> {
    const joined = joint(fn, this.parts.a)
    return joined
  }
}


export class MillAB<A, B> {
  parts: {
    a: Reducer<A>,
    b: Reducer<B>,
  }
  constructor(parts: {
    a: Reducer<A>,
    b: Reducer<B>,
  }) {
    this.parts = parts
  }
  and<C>(red: Reducer<C>): MillABC<A, B, C> {
    return new MillABC({
      ...this.parts,
      c: red,
    })
  }
  joint<R>(fn: (a: A, b: B) => R): Reducer<R> {
    const joined = joint(fn, this.parts.a, this.parts.b)
    return joined
  }
}

export class MillABC<A, B, C> {
  parts: {
    a: Reducer<A>,
    b: Reducer<B>,
    c: Reducer<C>,
  }
  constructor(parts: {
    a: Reducer<A>,
    b: Reducer<B>,
    c: Reducer<C>,
  }) {
    this.parts = parts
  }
  and<D>(red: Reducer<D>): MillABCD<A, B, C, D> {
    return new MillABCD({
      ...this.parts,
      d: red,
    })
  }
  joint<R>(fn: (a: A, b: B, c: C) => R): Reducer<R> {
    const joined = joint(fn, this.parts.a, this.parts.b, this.parts.c)
    return joined
  }
}

export class MillABCD<A, B, C, D> {
  parts: {
    a: Reducer<A>,
    b: Reducer<B>,
    c: Reducer<C>,
    d: Reducer<D>,
  }
  constructor(parts: {
    a: Reducer<A>,
    b: Reducer<B>,
    c: Reducer<C>,
    d: Reducer<D>,
  }) {
    this.parts = parts
  }
  and(red: empty): MillABCD<A, B, C, D> {
    return this
  }
  joint<R>(fn: (a: A, b: B, c: C, d: D) => R): Reducer<R> {
    const joined = joint(
      fn,
      this.parts.a,
      this.parts.b,
      this.parts.c,
      this.parts.d,
    )
    return joined
  }
}


export function mill(): Mill {
  return new Mill
}
