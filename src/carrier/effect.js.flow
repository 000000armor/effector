//@flow

// import {async as subject, type Subject} from 'most-subject'

import {Event} from './event'
import {Carrier} from './carrier'

import type {DoneType, FailType} from '../index.h'
import {CarrierEffect} from './carrier-effect'

//either.Either<Done, Fail>
export class Effect<
  Params = void,
  Done = void,
  Fail = Error,
  State = any
> extends Event<
  Params,
  CarrierEffect<Params, Done, Fail>,
  State
> {
  $call: (params: Params) => CarrierEffect<Params, Done, Fail>
  done: Event<DoneType<Params, Done>, Carrier<DoneType<Params, Done>>, State>
  fail: Event<FailType<Params, Fail>, Carrier<FailType<Params, Fail>>, State>
  thunk: (params: Params) => Promise<Done>
  /*::+*/use: (thunk: (params: Params) => Promise<Done>) => this
  constructor(name: string) {
    super(name, runner)
    declare var runner: Function
  }
}


declare function identity<T>(x: T): T
