//@flow

import * as Name from './type'
import type {Atom} from '../../effector/atom'

class CmdClass<+Data> {
 /*::+data: Data;*/
 constructor(data: Data) {
  this.data = data
 }
}

export class compute extends CmdClass<{
 reduce(oldValue: any, newValue: any, ctx: any): any,
}> {
 /*::+type: Name.ComputeType;*/
}

export class run extends CmdClass<{
 transactionContext?: (data: any) => () => void,
 runner(ctx: any): any,
}> {
 /*::+type: Name.RunType;*/
}
export class emit extends CmdClass<{
 +subtype: 'event' | 'effect',
 +fullName: string,
 runner(ctx: any): any,
}> {
 /*::+type: Name.EmitType;*/
}
export class filter extends CmdClass<{
 filter(value: any, ctx: any): boolean,
}> {
 /*::+type: Name.FilterType;*/
}
export class update extends CmdClass<{
 store: Atom<any>,
}> {
 /*::+type: Name.UpdateType;*/
}

export type Cmd = run | emit | compute | filter | update
