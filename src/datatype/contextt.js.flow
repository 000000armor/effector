//@flow

import type {Time} from '../time'

export type ComputeContextType = 21
export type EmitContextType = 22
export type RunContextType = 23
export type FilterContextType = 24
export type UpdateContextType = 25

export type ContextType =
 | ComputeContextType
 | EmitContextType
 | RunContextType
 | FilterContextType
 | UpdateContextType

export const COMPUTE: ComputeContextType = 21
export const EMIT: EmitContextType = 22
export const RUN: RunContextType = 23
export const FILTER: FilterContextType = 24
export const UPDATE: UpdateContextType = 25


declare class ContextClass<+Data> {
 +type: $Subtype<ContextType>;
 +data: Data;
 +time: Time;
 constructor(data: Data): ContextClass<Data>
}

declare export class compute extends ContextClass<{
 +args: Array<any>,
 result: any,
 error: any,
 isError: boolean,
 isNone: boolean,
 isChanged: boolean,
}> {
 static [[call]]: (
  args: Array<any>,
  result: any,
  error: any,
  isError: boolean,
  isNone: boolean,
  isChanged: boolean,
 ) => compute;
 +type: ComputeContextType;
 constructor(
  args: Array<any>,
  result: any,
  error: any,
  isError: boolean,
  isNone: boolean,
  isChanged: boolean,
 ): compute;
}
declare export class emit extends ContextClass<{
 +payload: any,
 +eventName: string,
}> {
 static [[call]]: (eventName: string, payload: any) => emit;
 /*::
 +type: EmitContextType;
 */
 constructor(eventName: string, payload: any): emit;
}
declare export class run extends ContextClass<{
 +args: Array<any>,
 +parentContext: compute | emit | filter | update,
}> {
 static [[call]]: (args: Array<any>, parentContext: compute | emit | filter | update) => run;
 /*::
 +type: RunContextType;
 */
 constructor(args: Array<any>, parentContext: compute | emit | filter | update): run
}
declare export class filter extends ContextClass<{
 +value: any,
 isChanged: boolean,
}> {
 static [[call]]: (value: any, isChanged: boolean) => filter;
 /*::
 +type: FilterContextType;
 */
 constructor(value: any, isChanged: boolean): filter;
}
declare export class update extends ContextClass<{
 value: any,
}> {
 static [[call]]: (value: any) => update;
 /*::
 +type: UpdateContextType;
 */
 constructor(value: any): update
}

export type Context = compute | emit | run | filter | update
