//@flow

import type {Reducer} from './index.h'

declare export function joint<A, R>(
  fn: (a: A) => R,
  setA: Reducer<A>,
  ...none: Array<void>
): Reducer<R>
declare export function joint<A, B, R>(
  fn: (a: A, b: B) => R,
  setA: Reducer<A>,
  setB: Reducer<B>,
  ...none: Array<void>
): Reducer<R>
declare export function joint<A, B, C, R>(
  fn: (a: A, b: B, c: C) => R,
  setA: Reducer<A>,
  setB: Reducer<B>,
  setC: Reducer<C>,
  ...none: Array<void>
): Reducer<R>
declare export function joint<A, B, C, D, R>(
  fn: (a: A, b: B, c: C, d: D) => R,
  setA: Reducer<A>,
  setB: Reducer<B>,
  setC: Reducer<C>,
  setD: Reducer<D>,
  ...none: Array<void>
): Reducer<R>
declare export function joint<A, B, C, D, E, R>(
  fn: (a: A, b: B, c: C, d: D, e: E) => R,
  setA: Reducer<A>,
  setB: Reducer<B>,
  setC: Reducer<C>,
  setD: Reducer<D>,
  setE: Reducer<E>,
  ...none: Array<void>
): Reducer<R>
declare export function joint<A, B, C, D, E, F, R>(
  fn: (a: A, b: B, c: C, d: D, e: E, f: F) => R,
  setA: Reducer<A>,
  setB: Reducer<B>,
  setC: Reducer<C>,
  setD: Reducer<D>,
  setE: Reducer<E>,
  setF: Reducer<F>,
  ...none: Array<void>
): Reducer<R>
declare export function joint<A, B, C, D, E, F, G, R>(
  fn: (a: A, b: B, c: C, d: D, e: E, f: F, g: G) => R,
  setA: Reducer<A>,
  setB: Reducer<B>,
  setC: Reducer<C>,
  setD: Reducer<D>,
  setE: Reducer<E>,
  setF: Reducer<F>,
  setG: Reducer<G>,
  ...none: Array<void>
): Reducer<R>
declare export function joint<A, B, C, D, E, F, G, H, R>(
  fn: (a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H) => R,
  setA: Reducer<A>,
  setB: Reducer<B>,
  setC: Reducer<C>,
  setD: Reducer<D>,
  setE: Reducer<E>,
  setF: Reducer<F>,
  setG: Reducer<G>,
  setH: Reducer<H>,
  ...none: Array<void>
): Reducer<R>
