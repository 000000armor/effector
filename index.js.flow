//@flow


import {Stream} from 'most'
import type {StoreEnhancer} from 'redux'

export /*::opaque*/
type ID/*:number*/ = number

export type DisposeStatus
  = 'disposed'
  | 'unknown'

export type DeferStatus
  = 'resolved'
  | 'rejected'
  | 'unknown'

export type DoneType<Params = void, Done = void> = {
  params: Params,
  result: Done,
}

export type FailType<Params = void, Fail = Error> = {
  params: Params,
  error: Fail,
}

declare export class Dispose<Rs> {
  id: ID,
  status: DisposeStatus,
  done: Promise<Rs>,
  disposed(data: Rs): void,
}

declare export class Defer<Rs, Rj> {
  id: ID,
  status: DeferStatus,
  done: Promise<Rs>,
  fail: Promise<Rj>,
  promise(): Promise<Rs>,
  resolved(data: Rs): void,
  rejected(error: Rj): void,
}

export type EpicF<P, State, R> = (
  data$: Stream<$Exact<{data: P, state: State}>>,
  state$: Stream<State>
) => Stream<R>

declare export class Carrier<E> {
  id: ID,
  dispose: Dispose<E>,
  typeId: number,
  type: string,
  payload: E,
  plain(): {
    type: string,
    payload: E,
  },
  send(): Promise<E>,
}

declare export class CarrierEffect<
  Params = void,
  Done = void,
  Fail = Error
> {
  id: ID,
  typeId: number,
  type: string,
  payload: Params,
  plain(): {
    type: string,
    payload: Params,
  },
  send(): Promise<Params>,
  defer: Defer<DoneType<Params, Done>, FailType<Params, Fail>>,
  done(): Promise<Done>,
  fail(): Promise<Fail>,
  promise(): Promise<Done>,
}

 declare export class Event<P, State = any> {
  (payload: P): Carrier<P>,
  $call(payload: P): Carrier<P>,
  id: ID,
  getType(): string,
  watch<R>(handler: (data: P, state: State) => R): Stream<R>,
  epic<R>(
    epic: EpicF<P, State, R>
  ): Stream<R>,
}

declare export class Effect<
  Params = void,
  Done = void,
  Fail = Error,
  State = any
> {
  (params: Params): CarrierEffect<Params, Done, Fail>,
  $call(params: Params): CarrierEffect<Params, Done, Fail>,
  id: ID,
  getType(): string,
  watch<R>(handler: (data: Params, state: State) => R): Stream<R>,
  epic<R>(
    epic: EpicF<Params, State, R>
  ): Stream<R>,
  done: Event<DoneType<Params, Done>, State>,
  fail: Event<FailType<Params, Fail>, State>,
  use(thunk: (params: Params) => Promise<Done>): Effect<Params, Done, Fail, State>,
}

declare export class Domain<State> {
  domainName: string,
  connect(domain: Domain<State>): void,
  effect<Params, Done, Fail>(
    description: string
  ): Effect<Params, Done, Fail, State>,
  event<P>(
    description: string
  ): Event<P, State>,
}

declare export function createDomain<State>(name: string): Domain<State>
declare export function effectorEnhancer<T>(
  domains?: Array<Domain<T>>
): StoreEnhancer<T>

export type ReduxAction<T> = {
  type: string,
  payload: T,
}

export type ReducerRedux<State = void, T = any> = (
  state: State, action: ReduxAction<T>
) => State

declare export class Reducer<State> {
  (state: State, payload: any): State,
  $call(state: State, payload: any): State,
  defaultState: State,
  on<T>(
    event: Event<T> | Effect<T, any, any>,
    handler: (state: State, payload: T) => State,
  ): Reducer<State>,
  map<S>(fn: (e: State) => S): Reducer<S>,
  fallback(handler: (state: State, payload: mixed) => State): Reducer<State>,
}

declare export function createReducer<T>(
  defaultState: T
): Reducer<T>
