/**
 * Flowtype definitions for lines
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.8.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 * @flow
 */

import type {Options} from './options'
import * as namedTypes from 'ast-types/gen/namedTypes'
declare type Pos = namedTypes.Position
declare type LineInfo = {
  +line: string,
  +indent: number,
  +locked: boolean,
  +sliceStart: number,
  +sliceEnd: number,
  ...
}
declare export class Lines {
  length: number;
  name: string | null;
  constructor(infos: LineInfo[], sourceFileName?: string | null): this;
  toString(options?: Options): string;
  getSourceMap(sourceMapName: string, sourceRoot?: string): any;
  bootstrapCharAt(pos: Pos): string;
  charAt(pos: Pos): string;
  stripMargin(width: number, skipFirstLine: boolean): Lines;
  indent(by: number): Lines;
  indentTail(by: number): Lines;
  lockIndentTail(): Lines;
  getIndentAt(line: number): number;
  guessTabWidth(): number;
  startsWithComment(): boolean;
  isOnlyWhitespace(): boolean;
  isPrecededOnlyByWhitespace(pos: Pos): boolean;
  getLineLength(line: number): number;
  nextPos(pos: Pos, skipSpaces?: boolean): boolean;
  prevPos(pos: Pos, skipSpaces?: boolean): boolean;
  firstPos(): {
    line: number,
    column: number,
    ...
  };
  lastPos(): {
    line: number,
    column: number,
    ...
  };
  skipSpaces(
    pos: Pos,
    backward?: boolean,
    modifyInPlace?: boolean,
  ): namedTypes.Position | null;
  trimLeft(): Lines;
  trimRight(): Lines;
  trim(): Lines;
  eachPos(
    callback: (pos: Pos) => any,
    startPos?: Pos,
    skipSpaces?: boolean,
  ): void;
  bootstrapSlice(start: Pos, end: Pos): Lines;
  slice(start?: Pos, end?: Pos): Lines;
  bootstrapSliceString(start: Pos, end: Pos, options?: Options): string;
  sliceString(start?: Pos, end?: Pos, options?: Options): string;
  isEmpty(): boolean;
  join(elements: (string | Lines)[]): Lines;
  concat(...args: (string | Lines)[]): Lines;
}
declare export function countSpaces(spaces: any, tabWidth?: number): number

/**
 * @param {Object} options - Options object that configures printing.
 */
declare export function fromString(
  string: string | Lines,
  options?: Options,
): Lines
declare export function concat(elements: any): Lines
declare export {}
