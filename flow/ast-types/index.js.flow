/**
 * Flowtype definitions for ast-types
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.9.2
 * @flow
 */

import {ASTNode, type Type as TypeT, AnyType, type Field} from './lib/types'

import type {NodePath as NodePathT} from './lib/node-path'
import {namedTypes} from './gen/namedTypes'
import {builders as builders_} from './gen/builders'
import {Visitor} from './gen/visitor'
declare var astNodesAreEquivalent: {
  (a: any, b: any, problemPath?: any): boolean,
  assert(a: any, b: any): void,
  ...
}
declare var builders: builders_
declare var builtInTypes: {
  string: Type<string>,
  function: Type<Function>,
  array: Type<any[]>,
  object: Type<{
    [key: string]: any,
    ...,
  }>,
  RegExp: Type<RegExp>,
  Date: Type<Date>,
  number: Type<number>,
  boolean: Type<boolean>,
  null: Type<null>,
  undefined: Type<void>,
  ...
}
declare var defineMethod: (name: any, func?: Function | void) => Function
declare var eachField: (
  object: any,
  callback: (name: any, value: any) => any,
  context?: any,
) => void
declare var finalize: () => void
declare var getBuilderName: (typeName: any) => any
declare var getFieldNames: (object: any) => string[]
declare var getFieldValue: (object: any, fieldName: any) => any
declare var getSupertypeNames: (typeName: string) => string[]
declare var NodePath: $PropertyType<
  //$todo
  $Exports<'ast-types/lib/node-path'>,
  'NodePathConstructor',
>
declare var Path: $PropertyType<
  //$todo
  $Exports<'ast-types/lib/path'>,
  'PathConstructor',
>
declare var PathVisitor: $PropertyType<
  //$todo
  $Exports<'ast-types/lib/path-visitor'>,
  'PathVisitorConstructor',
>
declare var someField: (
  object: any,
  callback: (name: any, value: any) => any,
  context?: any,
) => boolean
declare var Type: {
  or(...types: any[]): Type<any>,
  from<T>(value: any, name?: string | void): Type<T>,
  //$todo
  def(typeName: string): $PropertyType<$Exports<'ast-types/lib/types'>, 'Def'>,
  hasDef(typeName: string): boolean,
  ...
}
declare var use: <T>(
  //$todo
  plugin: $PropertyType<$Exports<'ast-types/types'>, 'Plugin'>,
) => T
declare var visit: <M>(node: ASTNode, methods?: Visitor<M> | void) => any
declare export {
  AnyType,
  ASTNode,
  astNodesAreEquivalent,
  builders,
  builtInTypes,
  defineMethod,
  eachField,
  finalize,
  getBuilderName,
  getFieldNames,
  getFieldValue,
  getSupertypeNames,
  namedTypes,
  NodePath,
  Path,
  PathVisitor,
  someField,
  Type,
  use,
  visit,
  Visitor,
}
