/**
 * Flowtype definitions for path-visitor
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.8.2
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 * @flow
 */

import type {Fork, Omit} from '../types'
import {ASTNode} from './types'
import type {NodePath} from './node-path'
import type {Visitor as GenVisitor$Visitor} from '../gen/visitor'
export interface PathVisitor {
  _reusableContextStack: any;
  _methodNameTable: any;
  _shouldVisitComments: any;
  Context: any;
  _visiting: any;
  _changeReported: any;
  _abortRequested: boolean;
  visit(...args: any[]): any;
  reset(...args: any[]): any;
  visitWithoutReset(path: any): any;
  AbortRequest: any;
  abort(): void;
  visitor: any;
  acquireContext(path: any): any;
  releaseContext(context: any): void;
  reportChanged(): void;
  wasChangeReported(): any;
}
export interface PathVisitorStatics {
  fromMethodsObject(methods?: any): Visitor;
  visit<M>(node: ASTNode, methods?: GenVisitor$Visitor<M>): any;
}
export type PathVisitorConstructor = {
  new(): PathVisitor,
} & PathVisitorStatics
export type Visitor = {} & PathVisitor
export type VisitorConstructor = {
  new(): Visitor,
} & PathVisitorStatics
export interface VisitorMethods {
  [visitorMethod: string]: (path: NodePath<>) => any;
}
export interface SharedContextMethods {
  currentPath: any;
  needToCallTraverse: boolean;
  Context: any;
  visitor: any;
  reset(path: any, ...args: any[]): any;
  invokeVisitorMethod(methodName: string): any;
  traverse(path: any, newVisitor?: VisitorMethods): any;
  visit(path: any, newVisitor?: VisitorMethods): any;
  reportChanged(): void;
  abort(): void;
}
export type Context = {} & Omit<PathVisitor, 'visit' | 'reset'> &
  SharedContextMethods
declare export default function pathVisitorPlugin(
  fork: Fork,
): PathVisitorConstructor
