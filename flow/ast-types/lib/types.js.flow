/**
 * Flowtype definitions for ast-types
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.9.2
 * @flow
 */

import type {Fork} from '../types'
declare type Deep = boolean | ((type: Type<any>, value: any) => void)
export type Type<T> =
  | ArrayType<T>
  | IdentityType<T>
  | ObjectType<T>
  | OrType<T>
  | PredicateType<T>
export interface AnyType {
  toString(): string;
  check(value: any, deep?: Deep): boolean;
  assert(value: any, deep?: Deep): boolean;
  arrayOf(): AnyType;
}
declare class BaseType<T> {
  toString(): string;
  check(value: any, deep?: Deep): boolean;
  assert(value: any, deep?: Deep): boolean;
  arrayOf(): Type<T[]>;
}
declare class ArrayType<T> mixins BaseType<T> {
  +elemType: Type<$Call<<E>(arr: $ReadOnlyArray<E>) => E, T>>;
  +kind: 'ArrayType';
  constructor(elemType: Type<$Call<<E>(arr: $ReadOnlyArray<E>) => E, T>>): this;
  toString(): string;
  check(value: any, deep?: Deep): boolean;
}
declare class IdentityType<T> mixins BaseType<T> {
  +value: T;
  +kind: 'IdentityType';
  constructor(value: T): this;
  toString(): string;
  check(value: any, deep?: Deep): boolean;
}
declare class ObjectType<T> mixins BaseType<T> {
  +fields: Field<any>[];
  +kind: 'ObjectType';
  constructor(fields: Field<any>[]): this;
  toString(): string;
  check(value: any, deep?: Deep): boolean;
}
declare class OrType<T> mixins BaseType<T> {
  +types: Type<any>[];
  +kind: 'OrType';
  constructor(types: Type<any>[]): this;
  toString(): string;
  check(value: any, deep?: Deep): boolean;
}
declare class PredicateType<T> mixins BaseType<T> {
  +name: string;
  +predicate: (value: any, deep?: Deep) => boolean;
  +kind: 'PredicateType';
  constructor(
    name: string,
    predicate: (value: any, deep?: Deep) => boolean,
  ): this;
  toString(): string;
  check(value: any, deep?: Deep): boolean;
}
declare export class Def<T = any> {
  +type: Type<T>;
  +typeName: string;
  baseNames: string[];
  ownFields: {
    [name: string]: Field<any>,
    ...,
  };
  allSupertypes: {
    [name: string]: Def<any>,
    ...,
  };
  supertypeList: string[];
  allFields: {
    [name: string]: Field<any>,
    ...,
  };
  fieldNames: string[];
  finalized: boolean;
  buildable: boolean;
  buildParams: string[];
  constructor(type: Type<T>, typeName: string): this;
  isSupertypeOf(that: Def<any>): boolean;
  checkAllFields(value: any, deep?: any): boolean;
  check(value: any, deep?: any): boolean;
  bases(...supertypeNames: string[]): this;
  build(...buildParams: string[]): this;
  field(name: string, type: any, defaultFn?: Function, hidden?: boolean): this;
  finalize(): void;
}
declare class Field<T> {
  +name: string;
  +type: Type<T>;
  +defaultFn?: Function | void;
  +hidden: boolean;
  constructor(
    name: string,
    type: Type<T>,
    defaultFn?: Function | void,
    hidden?: boolean,
  ): this;
  toString(): string;
  getValue(obj: {
    [key: string]: any,
    ...,
  }): any;
}
declare type FieldType<T> = Field<T>
export type {FieldType as Field}
export interface ASTNode {
  type: string;
}
export interface Builder {
  (...args: any[]): ASTNode;
  from(obj: {
    [param: string]: any,
    ...,
  }): ASTNode;
}
declare export default function typesPlugin(
  _fork: Fork,
): {
  Type: {
    or(...types: any[]): Type<any>,
    from<T>(value: any, name?: string | void): Type<T>,
    def(typeName: string): Def<any>,
    hasDef(typeName: string): boolean,
    ...
  },
  builtInTypes: {
    string: Type<string>,
    function: Type<Function>,
    array: Type<any[]>,
    object: Type<{
      [key: string]: any,
      ...,
    }>,
    RegExp: Type<RegExp>,
    Date: Type<Date>,
    number: Type<number>,
    boolean: Type<boolean>,
    null: Type<null>,
    undefined: Type<void>,
    ...
  },
  getSupertypeNames: (typeName: string) => string[],
  computeSupertypeLookupTable: (
    candidates: any,
  ) => {
    [typeName: string]: any,
    ...,
  },
  //$todo
  builders: $PropertyType<$Exports<'ast-types/gen/builders'>, 'builders'>,
  defineMethod: (name: any, func?: Function | void) => Function,
  getBuilderName: (typeName: any) => any,
  getStatementBuilderName: (typeName: any) => any,
  //$todo
  namedTypes: $PropertyType<$Exports<'ast-types/gen/namedTypes'>, 'NamedTypes'>,
  getFieldNames: (object: any) => string[],
  getFieldValue: (object: any, fieldName: any) => any,
  eachField: (
    object: any,
    callback: (name: any, value: any) => any,
    context?: any,
  ) => void,
  someField: (
    object: any,
    callback: (name: any, value: any) => any,
    context?: any,
  ) => boolean,
  finalize: () => void,
  ...
}
