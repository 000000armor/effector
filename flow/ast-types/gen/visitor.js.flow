/**
 * Flowtype definitions for visitor
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.8.2
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 * @flow
 */

import type {NodePath} from '../lib/node-path'
import type {Context} from '../lib/path-visitor'
import * as namedTypes from './namedTypes'

export interface Visitor<M = {}> {
  visitPrintable?: (path: NodePath<namedTypes.Printable>) => any;
  visitSourceLocation?: (path: NodePath<namedTypes.SourceLocation>) => any;
  visitNode?: (path: NodePath<namedTypes.Node>) => any;
  visitComment?: (path: NodePath<namedTypes.Comment>) => any;
  visitPosition?: (path: NodePath<namedTypes.Position>) => any;
  visitFile?: (path: NodePath<namedTypes.File>) => any;
  visitProgram?: (path: NodePath<namedTypes.Program>) => any;
  visitStatement?: (path: NodePath<namedTypes.Statement>) => any;
  visitFunction?: (path: NodePath<namedTypes.Function>) => any;
  visitExpression?: (path: NodePath<namedTypes.Expression>) => any;
  visitPattern?: (path: NodePath<namedTypes.Pattern>) => any;
  visitIdentifier?: (path: NodePath<namedTypes.Identifier>) => any;
  visitBlockStatement?: (path: NodePath<namedTypes.BlockStatement>) => any;
  visitEmptyStatement?: (path: NodePath<namedTypes.EmptyStatement>) => any;
  visitExpressionStatement?: (
    path: NodePath<namedTypes.ExpressionStatement>,
  ) => any;
  visitIfStatement?: (path: NodePath<namedTypes.IfStatement>) => any;
  visitLabeledStatement?: (path: NodePath<namedTypes.LabeledStatement>) => any;
  visitBreakStatement?: (path: NodePath<namedTypes.BreakStatement>) => any;
  visitContinueStatement?: (
    path: NodePath<namedTypes.ContinueStatement>,
  ) => any;
  visitWithStatement?: (path: NodePath<namedTypes.WithStatement>) => any;
  visitSwitchStatement?: (path: NodePath<namedTypes.SwitchStatement>) => any;
  visitSwitchCase?: (path: NodePath<namedTypes.SwitchCase>) => any;
  visitReturnStatement?: (path: NodePath<namedTypes.ReturnStatement>) => any;
  visitThrowStatement?: (path: NodePath<namedTypes.ThrowStatement>) => any;
  visitTryStatement?: (path: NodePath<namedTypes.TryStatement>) => any;
  visitCatchClause?: (path: NodePath<namedTypes.CatchClause>) => any;
  visitWhileStatement?: (path: NodePath<namedTypes.WhileStatement>) => any;
  visitDoWhileStatement?: (path: NodePath<namedTypes.DoWhileStatement>) => any;
  visitForStatement?: (path: NodePath<namedTypes.ForStatement>) => any;
  visitDeclaration?: (path: NodePath<namedTypes.Declaration>) => any;
  visitVariableDeclaration?: (
    path: NodePath<namedTypes.VariableDeclaration>,
  ) => any;
  visitForInStatement?: (path: NodePath<namedTypes.ForInStatement>) => any;
  visitDebuggerStatement?: (
    path: NodePath<namedTypes.DebuggerStatement>,
  ) => any;
  visitFunctionDeclaration?: (
    path: NodePath<namedTypes.FunctionDeclaration>,
  ) => any;
  visitFunctionExpression?: (
    path: NodePath<namedTypes.FunctionExpression>,
  ) => any;
  visitVariableDeclarator?: (
    path: NodePath<namedTypes.VariableDeclarator>,
  ) => any;
  visitThisExpression?: (path: NodePath<namedTypes.ThisExpression>) => any;
  visitArrayExpression?: (path: NodePath<namedTypes.ArrayExpression>) => any;
  visitObjectExpression?: (path: NodePath<namedTypes.ObjectExpression>) => any;
  visitProperty?: (path: NodePath<namedTypes.Property>) => any;
  visitLiteral?: (path: NodePath<namedTypes.Literal>) => any;
  visitSequenceExpression?: (
    path: NodePath<namedTypes.SequenceExpression>,
  ) => any;
  visitUnaryExpression?: (path: NodePath<namedTypes.UnaryExpression>) => any;
  visitBinaryExpression?: (path: NodePath<namedTypes.BinaryExpression>) => any;
  visitAssignmentExpression?: (
    path: NodePath<namedTypes.AssignmentExpression>,
  ) => any;
  visitMemberExpression?: (path: NodePath<namedTypes.MemberExpression>) => any;
  visitUpdateExpression?: (path: NodePath<namedTypes.UpdateExpression>) => any;
  visitLogicalExpression?: (
    path: NodePath<namedTypes.LogicalExpression>,
  ) => any;
  visitConditionalExpression?: (
    path: NodePath<namedTypes.ConditionalExpression>,
  ) => any;
  visitNewExpression?: (path: NodePath<namedTypes.NewExpression>) => any;
  visitCallExpression?: (path: NodePath<namedTypes.CallExpression>) => any;
  visitRestElement?: (path: NodePath<namedTypes.RestElement>) => any;
  visitTypeAnnotation?: (path: NodePath<namedTypes.TypeAnnotation>) => any;
  visitTSTypeAnnotation?: (path: NodePath<namedTypes.TSTypeAnnotation>) => any;
  visitSpreadElementPattern?: (
    path: NodePath<namedTypes.SpreadElementPattern>,
  ) => any;
  visitArrowFunctionExpression?: (
    path: NodePath<namedTypes.ArrowFunctionExpression>,
  ) => any;
  visitForOfStatement?: (path: NodePath<namedTypes.ForOfStatement>) => any;
  visitYieldExpression?: (path: NodePath<namedTypes.YieldExpression>) => any;
  visitGeneratorExpression?: (
    path: NodePath<namedTypes.GeneratorExpression>,
  ) => any;
  visitComprehensionBlock?: (
    path: NodePath<namedTypes.ComprehensionBlock>,
  ) => any;
  visitComprehensionExpression?: (
    path: NodePath<namedTypes.ComprehensionExpression>,
  ) => any;
  visitObjectProperty?: (path: NodePath<namedTypes.ObjectProperty>) => any;
  visitPropertyPattern?: (path: NodePath<namedTypes.PropertyPattern>) => any;
  visitObjectPattern?: (path: NodePath<namedTypes.ObjectPattern>) => any;
  visitArrayPattern?: (path: NodePath<namedTypes.ArrayPattern>) => any;
  visitMethodDefinition?: (path: NodePath<namedTypes.MethodDefinition>) => any;
  visitSpreadElement?: (path: NodePath<namedTypes.SpreadElement>) => any;
  visitAssignmentPattern?: (
    path: NodePath<namedTypes.AssignmentPattern>,
  ) => any;
  visitClassPropertyDefinition?: (
    path: NodePath<namedTypes.ClassPropertyDefinition>,
  ) => any;
  visitClassProperty?: (path: NodePath<namedTypes.ClassProperty>) => any;
  visitClassBody?: (path: NodePath<namedTypes.ClassBody>) => any;
  visitClassDeclaration?: (path: NodePath<namedTypes.ClassDeclaration>) => any;
  visitClassExpression?: (path: NodePath<namedTypes.ClassExpression>) => any;
  visitSpecifier?: (path: NodePath<namedTypes.Specifier>) => any;
  visitModuleSpecifier?: (path: NodePath<namedTypes.ModuleSpecifier>) => any;
  visitImportSpecifier?: (path: NodePath<namedTypes.ImportSpecifier>) => any;
  visitImportNamespaceSpecifier?: (
    path: NodePath<namedTypes.ImportNamespaceSpecifier>,
  ) => any;
  visitImportDefaultSpecifier?: (
    path: NodePath<namedTypes.ImportDefaultSpecifier>,
  ) => any;
  visitImportDeclaration?: (
    path: NodePath<namedTypes.ImportDeclaration>,
  ) => any;
  visitTaggedTemplateExpression?: (
    path: NodePath<namedTypes.TaggedTemplateExpression>,
  ) => any;
  visitTemplateLiteral?: (path: NodePath<namedTypes.TemplateLiteral>) => any;
  visitTemplateElement?: (path: NodePath<namedTypes.TemplateElement>) => any;
  visitSpreadProperty?: (path: NodePath<namedTypes.SpreadProperty>) => any;
  visitSpreadPropertyPattern?: (
    path: NodePath<namedTypes.SpreadPropertyPattern>,
  ) => any;
  visitAwaitExpression?: (path: NodePath<namedTypes.AwaitExpression>) => any;
  visitJSXAttribute?: (path: NodePath<namedTypes.JSXAttribute>) => any;
  visitJSXIdentifier?: (path: NodePath<namedTypes.JSXIdentifier>) => any;
  visitJSXNamespacedName?: (
    path: NodePath<namedTypes.JSXNamespacedName>,
  ) => any;
  visitJSXExpressionContainer?: (
    path: NodePath<namedTypes.JSXExpressionContainer>,
  ) => any;
  visitJSXMemberExpression?: (
    path: NodePath<namedTypes.JSXMemberExpression>,
  ) => any;
  visitJSXSpreadAttribute?: (
    path: NodePath<namedTypes.JSXSpreadAttribute>,
  ) => any;
  visitJSXElement?: (path: NodePath<namedTypes.JSXElement>) => any;
  visitJSXOpeningElement?: (
    path: NodePath<namedTypes.JSXOpeningElement>,
  ) => any;
  visitJSXClosingElement?: (
    path: NodePath<namedTypes.JSXClosingElement>,
  ) => any;
  visitJSXFragment?: (path: NodePath<namedTypes.JSXFragment>) => any;
  visitJSXText?: (path: NodePath<namedTypes.JSXText>) => any;
  visitJSXOpeningFragment?: (
    path: NodePath<namedTypes.JSXOpeningFragment>,
  ) => any;
  visitJSXClosingFragment?: (
    path: NodePath<namedTypes.JSXClosingFragment>,
  ) => any;
  visitJSXEmptyExpression?: (
    path: NodePath<namedTypes.JSXEmptyExpression>,
  ) => any;
  visitJSXSpreadChild?: (path: NodePath<namedTypes.JSXSpreadChild>) => any;
  visitTypeParameterDeclaration?: (
    path: NodePath<namedTypes.TypeParameterDeclaration>,
  ) => any;
  visitTSTypeParameterDeclaration?: (
    path: NodePath<namedTypes.TSTypeParameterDeclaration>,
  ) => any;
  visitTypeParameterInstantiation?: (
    path: NodePath<namedTypes.TypeParameterInstantiation>,
  ) => any;
  visitTSTypeParameterInstantiation?: (
    path: NodePath<namedTypes.TSTypeParameterInstantiation>,
  ) => any;
  visitClassImplements?: (path: NodePath<namedTypes.ClassImplements>) => any;
  visitTSType?: (path: NodePath<namedTypes.TSType>) => any;
  visitTSHasOptionalTypeParameterInstantiation?: (
    path: NodePath<namedTypes.TSHasOptionalTypeParameterInstantiation>,
  ) => any;
  visitTSExpressionWithTypeArguments?: (
    path: NodePath<namedTypes.TSExpressionWithTypeArguments>,
  ) => any;
  visitFlow?: (path: NodePath<namedTypes.Flow>) => any;
  visitFlowType?: (path: NodePath<namedTypes.FlowType>) => any;
  visitAnyTypeAnnotation?: (
    path: NodePath<namedTypes.AnyTypeAnnotation>,
  ) => any;
  visitEmptyTypeAnnotation?: (
    path: NodePath<namedTypes.EmptyTypeAnnotation>,
  ) => any;
  visitMixedTypeAnnotation?: (
    path: NodePath<namedTypes.MixedTypeAnnotation>,
  ) => any;
  visitVoidTypeAnnotation?: (
    path: NodePath<namedTypes.VoidTypeAnnotation>,
  ) => any;
  visitNumberTypeAnnotation?: (
    path: NodePath<namedTypes.NumberTypeAnnotation>,
  ) => any;
  visitNumberLiteralTypeAnnotation?: (
    path: NodePath<namedTypes.NumberLiteralTypeAnnotation>,
  ) => any;
  visitNumericLiteralTypeAnnotation?: (
    path: NodePath<namedTypes.NumericLiteralTypeAnnotation>,
  ) => any;
  visitStringTypeAnnotation?: (
    path: NodePath<namedTypes.StringTypeAnnotation>,
  ) => any;
  visitStringLiteralTypeAnnotation?: (
    path: NodePath<namedTypes.StringLiteralTypeAnnotation>,
  ) => any;
  visitBooleanTypeAnnotation?: (
    path: NodePath<namedTypes.BooleanTypeAnnotation>,
  ) => any;
  visitBooleanLiteralTypeAnnotation?: (
    path: NodePath<namedTypes.BooleanLiteralTypeAnnotation>,
  ) => any;
  visitNullableTypeAnnotation?: (
    path: NodePath<namedTypes.NullableTypeAnnotation>,
  ) => any;
  visitNullLiteralTypeAnnotation?: (
    path: NodePath<namedTypes.NullLiteralTypeAnnotation>,
  ) => any;
  visitNullTypeAnnotation?: (
    path: NodePath<namedTypes.NullTypeAnnotation>,
  ) => any;
  visitThisTypeAnnotation?: (
    path: NodePath<namedTypes.ThisTypeAnnotation>,
  ) => any;
  visitExistsTypeAnnotation?: (
    path: NodePath<namedTypes.ExistsTypeAnnotation>,
  ) => any;
  visitExistentialTypeParam?: (
    path: NodePath<namedTypes.ExistentialTypeParam>,
  ) => any;
  visitFunctionTypeAnnotation?: (
    path: NodePath<namedTypes.FunctionTypeAnnotation>,
  ) => any;
  visitFunctionTypeParam?: (
    path: NodePath<namedTypes.FunctionTypeParam>,
  ) => any;
  visitArrayTypeAnnotation?: (
    path: NodePath<namedTypes.ArrayTypeAnnotation>,
  ) => any;
  visitObjectTypeAnnotation?: (
    path: NodePath<namedTypes.ObjectTypeAnnotation>,
  ) => any;
  visitObjectTypeProperty?: (
    path: NodePath<namedTypes.ObjectTypeProperty>,
  ) => any;
  visitObjectTypeSpreadProperty?: (
    path: NodePath<namedTypes.ObjectTypeSpreadProperty>,
  ) => any;
  visitObjectTypeIndexer?: (
    path: NodePath<namedTypes.ObjectTypeIndexer>,
  ) => any;
  visitObjectTypeCallProperty?: (
    path: NodePath<namedTypes.ObjectTypeCallProperty>,
  ) => any;
  visitObjectTypeInternalSlot?: (
    path: NodePath<namedTypes.ObjectTypeInternalSlot>,
  ) => any;
  visitVariance?: (path: NodePath<namedTypes.Variance>) => any;
  visitQualifiedTypeIdentifier?: (
    path: NodePath<namedTypes.QualifiedTypeIdentifier>,
  ) => any;
  visitGenericTypeAnnotation?: (
    path: NodePath<namedTypes.GenericTypeAnnotation>,
  ) => any;
  visitMemberTypeAnnotation?: (
    path: NodePath<namedTypes.MemberTypeAnnotation>,
  ) => any;
  visitUnionTypeAnnotation?: (
    path: NodePath<namedTypes.UnionTypeAnnotation>,
  ) => any;
  visitIntersectionTypeAnnotation?: (
    path: NodePath<namedTypes.IntersectionTypeAnnotation>,
  ) => any;
  visitTypeofTypeAnnotation?: (
    path: NodePath<namedTypes.TypeofTypeAnnotation>,
  ) => any;
  visitTypeParameter?: (path: NodePath<namedTypes.TypeParameter>) => any;
  visitInterfaceTypeAnnotation?: (
    path: NodePath<namedTypes.InterfaceTypeAnnotation>,
  ) => any;
  visitInterfaceExtends?: (path: NodePath<namedTypes.InterfaceExtends>) => any;
  visitInterfaceDeclaration?: (
    path: NodePath<namedTypes.InterfaceDeclaration>,
  ) => any;
  visitDeclareInterface?: (path: NodePath<namedTypes.DeclareInterface>) => any;
  visitTypeAlias?: (path: NodePath<namedTypes.TypeAlias>) => any;
  visitOpaqueType?: (path: NodePath<namedTypes.OpaqueType>) => any;
  visitDeclareTypeAlias?: (path: NodePath<namedTypes.DeclareTypeAlias>) => any;
  visitDeclareOpaqueType?: (
    path: NodePath<namedTypes.DeclareOpaqueType>,
  ) => any;
  visitTypeCastExpression?: (
    path: NodePath<namedTypes.TypeCastExpression>,
  ) => any;
  visitTupleTypeAnnotation?: (
    path: NodePath<namedTypes.TupleTypeAnnotation>,
  ) => any;
  visitDeclareVariable?: (path: NodePath<namedTypes.DeclareVariable>) => any;
  visitDeclareFunction?: (path: NodePath<namedTypes.DeclareFunction>) => any;
  visitDeclareClass?: (path: NodePath<namedTypes.DeclareClass>) => any;
  visitDeclareModule?: (path: NodePath<namedTypes.DeclareModule>) => any;
  visitDeclareModuleExports?: (
    path: NodePath<namedTypes.DeclareModuleExports>,
  ) => any;
  visitDeclareExportDeclaration?: (
    path: NodePath<namedTypes.DeclareExportDeclaration>,
  ) => any;
  visitExportSpecifier?: (path: NodePath<namedTypes.ExportSpecifier>) => any;
  visitExportBatchSpecifier?: (
    path: NodePath<namedTypes.ExportBatchSpecifier>,
  ) => any;
  visitDeclareExportAllDeclaration?: (
    path: NodePath<namedTypes.DeclareExportAllDeclaration>,
  ) => any;
  visitFlowPredicate?: (path: NodePath<namedTypes.FlowPredicate>) => any;
  visitInferredPredicate?: (
    path: NodePath<namedTypes.InferredPredicate>,
  ) => any;
  visitDeclaredPredicate?: (
    path: NodePath<namedTypes.DeclaredPredicate>,
  ) => any;
  visitExportDeclaration?: (
    path: NodePath<namedTypes.ExportDeclaration>,
  ) => any;
  visitBlock?: (path: NodePath<namedTypes.Block>) => any;
  visitLine?: (path: NodePath<namedTypes.Line>) => any;
  visitNoop?: (path: NodePath<namedTypes.Noop>) => any;
  visitDoExpression?: (path: NodePath<namedTypes.DoExpression>) => any;
  visitSuper?: (path: NodePath<namedTypes.Super>) => any;
  visitBindExpression?: (path: NodePath<namedTypes.BindExpression>) => any;
  visitDecorator?: (path: NodePath<namedTypes.Decorator>) => any;
  visitMetaProperty?: (path: NodePath<namedTypes.MetaProperty>) => any;
  visitParenthesizedExpression?: (
    path: NodePath<namedTypes.ParenthesizedExpression>,
  ) => any;
  visitExportDefaultDeclaration?: (
    path: NodePath<namedTypes.ExportDefaultDeclaration>,
  ) => any;
  visitExportNamedDeclaration?: (
    path: NodePath<namedTypes.ExportNamedDeclaration>,
  ) => any;
  visitExportNamespaceSpecifier?: (
    path: NodePath<namedTypes.ExportNamespaceSpecifier>,
  ) => any;
  visitExportDefaultSpecifier?: (
    path: NodePath<namedTypes.ExportDefaultSpecifier>,
  ) => any;
  visitExportAllDeclaration?: (
    path: NodePath<namedTypes.ExportAllDeclaration>,
  ) => any;
  visitCommentBlock?: (path: NodePath<namedTypes.CommentBlock>) => any;
  visitCommentLine?: (path: NodePath<namedTypes.CommentLine>) => any;
  visitDirective?: (path: NodePath<namedTypes.Directive>) => any;
  visitDirectiveLiteral?: (path: NodePath<namedTypes.DirectiveLiteral>) => any;
  visitInterpreterDirective?: (
    path: NodePath<namedTypes.InterpreterDirective>,
  ) => any;
  visitStringLiteral?: (path: NodePath<namedTypes.StringLiteral>) => any;
  visitNumericLiteral?: (path: NodePath<namedTypes.NumericLiteral>) => any;
  visitBigIntLiteral?: (path: NodePath<namedTypes.BigIntLiteral>) => any;
  visitNullLiteral?: (path: NodePath<namedTypes.NullLiteral>) => any;
  visitBooleanLiteral?: (path: NodePath<namedTypes.BooleanLiteral>) => any;
  visitRegExpLiteral?: (path: NodePath<namedTypes.RegExpLiteral>) => any;
  visitObjectMethod?: (path: NodePath<namedTypes.ObjectMethod>) => any;
  visitClassPrivateProperty?: (
    path: NodePath<namedTypes.ClassPrivateProperty>,
  ) => any;
  visitClassMethod?: (path: NodePath<namedTypes.ClassMethod>) => any;
  visitClassPrivateMethod?: (
    path: NodePath<namedTypes.ClassPrivateMethod>,
  ) => any;
  visitPrivateName?: (path: NodePath<namedTypes.PrivateName>) => any;
  visitRestProperty?: (path: NodePath<namedTypes.RestProperty>) => any;
  visitForAwaitStatement?: (
    path: NodePath<namedTypes.ForAwaitStatement>,
  ) => any;
  visitImport?: (path: NodePath<namedTypes.Import>) => any;
  visitTSQualifiedName?: (path: NodePath<namedTypes.TSQualifiedName>) => any;
  visitTSTypeReference?: (path: NodePath<namedTypes.TSTypeReference>) => any;
  visitTSHasOptionalTypeParameters?: (
    path: NodePath<namedTypes.TSHasOptionalTypeParameters>,
  ) => any;
  visitTSHasOptionalTypeAnnotation?: (
    path: NodePath<namedTypes.TSHasOptionalTypeAnnotation>,
  ) => any;
  visitTSAsExpression?: (path: NodePath<namedTypes.TSAsExpression>) => any;
  visitTSNonNullExpression?: (
    path: NodePath<namedTypes.TSNonNullExpression>,
  ) => any;
  visitTSAnyKeyword?: (path: NodePath<namedTypes.TSAnyKeyword>) => any;
  visitTSBigIntKeyword?: (path: NodePath<namedTypes.TSBigIntKeyword>) => any;
  visitTSBooleanKeyword?: (path: NodePath<namedTypes.TSBooleanKeyword>) => any;
  visitTSNeverKeyword?: (path: NodePath<namedTypes.TSNeverKeyword>) => any;
  visitTSNullKeyword?: (path: NodePath<namedTypes.TSNullKeyword>) => any;
  visitTSNumberKeyword?: (path: NodePath<namedTypes.TSNumberKeyword>) => any;
  visitTSObjectKeyword?: (path: NodePath<namedTypes.TSObjectKeyword>) => any;
  visitTSStringKeyword?: (path: NodePath<namedTypes.TSStringKeyword>) => any;
  visitTSSymbolKeyword?: (path: NodePath<namedTypes.TSSymbolKeyword>) => any;
  visitTSUndefinedKeyword?: (
    path: NodePath<namedTypes.TSUndefinedKeyword>,
  ) => any;
  visitTSUnknownKeyword?: (path: NodePath<namedTypes.TSUnknownKeyword>) => any;
  visitTSVoidKeyword?: (path: NodePath<namedTypes.TSVoidKeyword>) => any;
  visitTSThisType?: (path: NodePath<namedTypes.TSThisType>) => any;
  visitTSArrayType?: (path: NodePath<namedTypes.TSArrayType>) => any;
  visitTSLiteralType?: (path: NodePath<namedTypes.TSLiteralType>) => any;
  visitTSUnionType?: (path: NodePath<namedTypes.TSUnionType>) => any;
  visitTSIntersectionType?: (
    path: NodePath<namedTypes.TSIntersectionType>,
  ) => any;
  visitTSConditionalType?: (
    path: NodePath<namedTypes.TSConditionalType>,
  ) => any;
  visitTSInferType?: (path: NodePath<namedTypes.TSInferType>) => any;
  visitTSTypeParameter?: (path: NodePath<namedTypes.TSTypeParameter>) => any;
  visitTSParenthesizedType?: (
    path: NodePath<namedTypes.TSParenthesizedType>,
  ) => any;
  visitTSFunctionType?: (path: NodePath<namedTypes.TSFunctionType>) => any;
  visitTSConstructorType?: (
    path: NodePath<namedTypes.TSConstructorType>,
  ) => any;
  visitTSDeclareFunction?: (
    path: NodePath<namedTypes.TSDeclareFunction>,
  ) => any;
  visitTSDeclareMethod?: (path: NodePath<namedTypes.TSDeclareMethod>) => any;
  visitTSMappedType?: (path: NodePath<namedTypes.TSMappedType>) => any;
  visitTSTupleType?: (path: NodePath<namedTypes.TSTupleType>) => any;
  visitTSRestType?: (path: NodePath<namedTypes.TSRestType>) => any;
  visitTSOptionalType?: (path: NodePath<namedTypes.TSOptionalType>) => any;
  visitTSIndexedAccessType?: (
    path: NodePath<namedTypes.TSIndexedAccessType>,
  ) => any;
  visitTSTypeOperator?: (path: NodePath<namedTypes.TSTypeOperator>) => any;
  visitTSIndexSignature?: (path: NodePath<namedTypes.TSIndexSignature>) => any;
  visitTSPropertySignature?: (
    path: NodePath<namedTypes.TSPropertySignature>,
  ) => any;
  visitTSMethodSignature?: (
    path: NodePath<namedTypes.TSMethodSignature>,
  ) => any;
  visitTSTypePredicate?: (path: NodePath<namedTypes.TSTypePredicate>) => any;
  visitTSCallSignatureDeclaration?: (
    path: NodePath<namedTypes.TSCallSignatureDeclaration>,
  ) => any;
  visitTSConstructSignatureDeclaration?: (
    path: NodePath<namedTypes.TSConstructSignatureDeclaration>,
  ) => any;
  visitTSEnumMember?: (path: NodePath<namedTypes.TSEnumMember>) => any;
  visitTSTypeQuery?: (path: NodePath<namedTypes.TSTypeQuery>) => any;
  visitTSImportType?: (path: NodePath<namedTypes.TSImportType>) => any;
  visitTSTypeLiteral?: (path: NodePath<namedTypes.TSTypeLiteral>) => any;
  visitTSTypeAssertion?: (path: NodePath<namedTypes.TSTypeAssertion>) => any;
  visitTSEnumDeclaration?: (
    path: NodePath<namedTypes.TSEnumDeclaration>,
  ) => any;
  visitTSTypeAliasDeclaration?: (
    path: NodePath<namedTypes.TSTypeAliasDeclaration>,
  ) => any;
  visitTSModuleBlock?: (path: NodePath<namedTypes.TSModuleBlock>) => any;
  visitTSModuleDeclaration?: (
    path: NodePath<namedTypes.TSModuleDeclaration>,
  ) => any;
  visitTSImportEqualsDeclaration?: (
    path: NodePath<namedTypes.TSImportEqualsDeclaration>,
  ) => any;
  visitTSExternalModuleReference?: (
    path: NodePath<namedTypes.TSExternalModuleReference>,
  ) => any;
  visitTSExportAssignment?: (
    path: NodePath<namedTypes.TSExportAssignment>,
  ) => any;
  visitTSNamespaceExportDeclaration?: (
    path: NodePath<namedTypes.TSNamespaceExportDeclaration>,
  ) => any;
  visitTSInterfaceBody?: (path: NodePath<namedTypes.TSInterfaceBody>) => any;
  visitTSInterfaceDeclaration?: (
    path: NodePath<namedTypes.TSInterfaceDeclaration>,
  ) => any;
  visitTSParameterProperty?: (
    path: NodePath<namedTypes.TSParameterProperty>,
  ) => any;
  visitOptionalMemberExpression?: (
    path: NodePath<namedTypes.OptionalMemberExpression>,
  ) => any;
  visitOptionalCallExpression?: (
    path: NodePath<namedTypes.OptionalCallExpression>,
  ) => any;
}
