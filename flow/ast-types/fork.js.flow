/**
 * Flowtype definitions for ast-types
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.9.2
 * @flow
 */

import type {Def, Plugin} from './types'
declare export default function fn(
  defs: Def[],
): {
  Type: {
    //$todo
    or(...types: any[]): $PropertyType<$Exports<'ast-types/lib/types'>, 'Type'>,
    from<T>(
      value: any,
      name?: string | void,
    ): $PropertyType<$Exports<'ast-types/lib/types'>, 'Type'>,
    def(
      typeName: string,
    ): $PropertyType<$Exports<'ast-types/lib/types'>, 'Def'>,
    hasDef(typeName: string): boolean,
    ...
  },
  builtInTypes: {
    string: $PropertyType<$Exports<'ast-types/lib/types'>, 'Type'>,
    function: $PropertyType<$Exports<'ast-types/lib/types'>, 'Type'>,
    array: $PropertyType<$Exports<'ast-types/lib/types'>, 'Type'>,
    object: $PropertyType<$Exports<'ast-types/lib/types'>, 'Type'>,
    RegExp: $PropertyType<$Exports<'ast-types/lib/types'>, 'Type'>,
    Date: $PropertyType<$Exports<'ast-types/lib/types'>, 'Type'>,
    number: $PropertyType<$Exports<'ast-types/lib/types'>, 'Type'>,
    boolean: $PropertyType<$Exports<'ast-types/lib/types'>, 'Type'>,
    null: $PropertyType<$Exports<'ast-types/lib/types'>, 'Type'>,
    undefined: $PropertyType<$Exports<'ast-types/lib/types'>, 'Type'>,
    ...
  },
  //$todo
  namedTypes: $PropertyType<$Exports<'ast-types/gen/namedTypes'>, 'NamedTypes'>,
  //$todo
  builders: $PropertyType<$Exports<'ast-types/gen/builders'>, 'builders'>,
  defineMethod: (name: any, func?: Function | void) => Function,
  getFieldNames: (object: any) => string[],
  getFieldValue: (object: any, fieldName: any) => any,
  eachField: (
    object: any,
    callback: (name: any, value: any) => any,
    context?: any,
  ) => void,
  someField: (
    object: any,
    callback: (name: any, value: any) => any,
    context?: any,
  ) => boolean,
  getSupertypeNames: (typeName: string) => string[],
  getBuilderName: (typeName: any) => any,
  astNodesAreEquivalent: {
    (a: any, b: any, problemPath?: any): boolean,
    assert(a: any, b: any): void,
    ...
  },
  finalize: () => void,
  //$todo
  Path: $PropertyType<$Exports<'ast-types/lib/path'>, 'PathConstructor'>,
  NodePath: $PropertyType<
    //$todo
    $Exports<'ast-types/lib/node-path'>,
    'NodePathConstructor',
  >,
  PathVisitor: $PropertyType<
    //$todo
    $Exports<'ast-types/lib/path-visitor'>,
    'PathVisitorConstructor',
  >,
  use: <T>(plugin: Plugin<T>) => T,
  visit: <M>(
    node: $PropertyType<$Exports<'ast-types/lib/types'>, 'ASTNode'>,
    //$todo
    methods?: $PropertyType<$Exports<'ast-types/main'>, 'Visitor'> | void,
  ) => any,
  ...
}
